-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculate_statistics_calculate_statistics_Pipeline_find_minmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    min_val_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_1_ce0 : OUT STD_LOGIC;
    data_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_2_ce0 : OUT STD_LOGIC;
    data_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_3_ce0 : OUT STD_LOGIC;
    data_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    min_val_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    min_val_2_out_ap_vld : OUT STD_LOGIC;
    max_val_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_val_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of calculate_statistics_calculate_statistics_Pipeline_find_minmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln116_reg_438 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_3_reg_432 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln116_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_438_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal y_assign_fu_211_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal y_assign_reg_462_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal min_val_2_load_1_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_2_load_1_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln247_1_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln247_1_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_val_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_val_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_fu_387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln116_1_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal max_val_2_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_max_val_2_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal min_val_2_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_min_val_2_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_76 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln116_fu_235_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal data_ce0_local : STD_LOGIC;
    signal data_1_ce0_local : STD_LOGIC;
    signal data_2_ce0_local : STD_LOGIC;
    signal data_3_ce0_local : STD_LOGIC;
    signal grp_fu_158_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln116_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln3_fu_190_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_assign_fu_211_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_fu_211_p10 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitcast_ln247_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln247_1_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_256_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln247_fu_266_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln247_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln247_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln247_1_fu_283_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln247_3_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln247_2_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln247_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln247_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln247_1_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln241_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln241_fu_354_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln241_1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln241_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln241_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln241_1_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_158_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal y_assign_fu_211_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_assign_fu_211_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_assign_fu_211_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_assign_fu_211_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component calculate_statistics_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component calculate_statistics_sparsemux_9_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculate_statistics_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U29 : component calculate_statistics_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_158_p0,
        din1 => y_assign_reg_462,
        ce => ap_const_logic_1,
        opcode => grp_fu_158_opcode,
        dout => grp_fu_158_p2);

    sparsemux_9_2_32_1_1_U30 : component calculate_statistics_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => data_q0,
        din1 => data_1_q0,
        din2 => data_2_q0,
        din3 => data_3_q0,
        def => y_assign_fu_211_p9,
        sel => y_assign_fu_211_p10,
        dout => y_assign_fu_211_p11);

    flow_control_loop_pipe_sequential_init_U : component calculate_statistics_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_76 <= ap_const_lv31_1;
            elsif (((icmp_ln116_reg_438 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_76 <= add_ln116_fu_235_p2;
            end if; 
        end if;
    end process;

    max_val_2_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                max_val_2_fu_68 <= min_val_3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                max_val_2_fu_68 <= max_val_reg_494;
            end if; 
        end if;
    end process;

    min_val_2_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    min_val_2_fu_72 <= min_val_3;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    min_val_2_fu_72 <= min_val_reg_489;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                max_val_2_load_1_reg_477 <= ap_sig_allocacmp_max_val_2_load_1;
                min_val_reg_489 <= min_val_fu_335_p3;
                or_ln247_1_reg_484 <= or_ln247_1_fu_317_p2;
                y_assign_reg_462 <= y_assign_fu_211_p11;
                y_assign_reg_462_pp0_iter1_reg <= y_assign_reg_462;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_3_reg_432 <= ap_sig_allocacmp_i_3;
                icmp_ln116_reg_438 <= icmp_ln116_fu_184_p2;
                icmp_ln116_reg_438_pp0_iter1_reg <= icmp_ln116_reg_438;
                max_val_reg_494 <= max_val_fu_387_p3;
                min_val_2_load_1_reg_470 <= ap_sig_allocacmp_min_val_2_load_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln116_fu_235_p2 <= std_logic_vector(unsigned(i_3_reg_432) + unsigned(ap_const_lv31_1));
    and_ln241_1_fu_381_p2 <= (or_ln241_fu_370_p2 and and_ln241_fu_376_p2);
    and_ln241_fu_376_p2 <= (or_ln247_1_reg_484 and grp_fu_158_p2);
    and_ln247_1_fu_329_p2 <= (or_ln247_fu_299_p2 and and_ln247_fu_323_p2);
    and_ln247_fu_323_p2 <= (or_ln247_1_fu_317_p2 and grp_fu_158_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln116_reg_438)
    begin
        if (((icmp_ln116_reg_438 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv31_1;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_max_val_2_load_1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, max_val_reg_494, max_val_2_fu_68, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_max_val_2_load_1 <= max_val_reg_494;
        else 
            ap_sig_allocacmp_max_val_2_load_1 <= max_val_2_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_min_val_2_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, min_val_reg_489, ap_block_pp0_stage0, min_val_2_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_min_val_2_load_1 <= min_val_reg_489;
        else 
            ap_sig_allocacmp_min_val_2_load_1 <= min_val_2_fu_72;
        end if; 
    end process;

    bitcast_ln241_fu_341_p1 <= max_val_2_load_1_reg_477;
    bitcast_ln247_1_fu_270_p1 <= y_assign_reg_462;
    bitcast_ln247_fu_253_p1 <= min_val_2_load_1_reg_470;
    data_1_address0 <= zext_ln116_1_fu_200_p1(8 - 1 downto 0);
    data_1_ce0 <= data_1_ce0_local;

    data_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_1_ce0_local <= ap_const_logic_1;
        else 
            data_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    data_2_address0 <= zext_ln116_1_fu_200_p1(8 - 1 downto 0);
    data_2_ce0 <= data_2_ce0_local;

    data_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_2_ce0_local <= ap_const_logic_1;
        else 
            data_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    data_3_address0 <= zext_ln116_1_fu_200_p1(8 - 1 downto 0);
    data_3_ce0 <= data_3_ce0_local;

    data_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_3_ce0_local <= ap_const_logic_1;
        else 
            data_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= zext_ln116_1_fu_200_p1(8 - 1 downto 0);
    data_ce0 <= data_ce0_local;

    data_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_ce0_local <= ap_const_logic_1;
        else 
            data_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_158_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_158_opcode <= ap_const_lv5_2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_158_opcode <= ap_const_lv5_4;
            else 
                grp_fu_158_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_158_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_158_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_sig_allocacmp_max_val_2_load_1, ap_block_pp0_stage1, ap_sig_allocacmp_min_val_2_load_1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_158_p0 <= ap_sig_allocacmp_max_val_2_load_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_158_p0 <= ap_sig_allocacmp_min_val_2_load_1;
            else 
                grp_fu_158_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_158_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln116_fu_184_p2 <= "1" when (signed(zext_ln116_fu_180_p1) < signed(n)) else "0";
    icmp_ln241_1_fu_364_p2 <= "1" when (trunc_ln241_fu_354_p1 = ap_const_lv23_0) else "0";
    icmp_ln241_fu_358_p2 <= "0" when (tmp_7_fu_344_p4 = ap_const_lv8_FF) else "1";
    icmp_ln247_1_fu_293_p2 <= "1" when (trunc_ln247_fu_266_p1 = ap_const_lv23_0) else "0";
    icmp_ln247_2_fu_305_p2 <= "0" when (tmp_5_fu_273_p4 = ap_const_lv8_FF) else "1";
    icmp_ln247_3_fu_311_p2 <= "1" when (trunc_ln247_1_fu_283_p1 = ap_const_lv23_0) else "0";
    icmp_ln247_fu_287_p2 <= "0" when (tmp_3_fu_256_p4 = ap_const_lv8_FF) else "1";
    lshr_ln3_fu_190_p4 <= ap_sig_allocacmp_i_3(9 downto 2);
    max_val_2_out <= max_val_2_fu_68;

    max_val_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln116_reg_438_pp0_iter1_reg, ap_block_pp0_stage1_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln116_reg_438_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            max_val_2_out_ap_vld <= ap_const_logic_1;
        else 
            max_val_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    max_val_fu_387_p3 <= 
        max_val_2_load_1_reg_477 when (and_ln241_1_fu_381_p2(0) = '1') else 
        y_assign_reg_462_pp0_iter1_reg;
    min_val_2_out <= min_val_2_fu_72;

    min_val_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln116_reg_438_pp0_iter1_reg, ap_block_pp0_stage1_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln116_reg_438_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            min_val_2_out_ap_vld <= ap_const_logic_1;
        else 
            min_val_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    min_val_fu_335_p3 <= 
        min_val_2_load_1_reg_470 when (and_ln247_1_fu_329_p2(0) = '1') else 
        y_assign_reg_462;
    or_ln241_fu_370_p2 <= (icmp_ln241_fu_358_p2 or icmp_ln241_1_fu_364_p2);
    or_ln247_1_fu_317_p2 <= (icmp_ln247_3_fu_311_p2 or icmp_ln247_2_fu_305_p2);
    or_ln247_fu_299_p2 <= (icmp_ln247_fu_287_p2 or icmp_ln247_1_fu_293_p2);
    tmp_3_fu_256_p4 <= bitcast_ln247_fu_253_p1(30 downto 23);
    tmp_5_fu_273_p4 <= bitcast_ln247_1_fu_270_p1(30 downto 23);
    tmp_7_fu_344_p4 <= bitcast_ln241_fu_341_p1(30 downto 23);
    trunc_ln241_fu_354_p1 <= bitcast_ln241_fu_341_p1(23 - 1 downto 0);
    trunc_ln247_1_fu_283_p1 <= bitcast_ln247_1_fu_270_p1(23 - 1 downto 0);
    trunc_ln247_fu_266_p1 <= bitcast_ln247_fu_253_p1(23 - 1 downto 0);
    y_assign_fu_211_p10 <= i_3_reg_432(2 - 1 downto 0);
    y_assign_fu_211_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    zext_ln116_1_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_190_p4),64));
    zext_ln116_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_3),32));
end behav;
