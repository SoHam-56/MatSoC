// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="unpack_blk_to_stream_unpack_blk_to_stream,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.544000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=146,HLS_SYN_LUT=186,HLS_VERSION=2024_1}" *)

module unpack_blk_to_stream (
        ap_clk,
        ap_rst_n,
        float_stream_TREADY,
        blk_stream_TDATA,
        blk_stream_TVALID,
        blk_stream_TREADY,
        float_stream_TDATA,
        float_stream_TVALID,
        float_stream_TKEEP,
        float_stream_TSTRB,
        float_stream_TUSER,
        float_stream_TLAST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   float_stream_TREADY;
input  [95:0] blk_stream_TDATA;
input   blk_stream_TVALID;
output   blk_stream_TREADY;
output  [31:0] float_stream_TDATA;
output   float_stream_TVALID;
output  [3:0] float_stream_TKEEP;
output  [3:0] float_stream_TSTRB;
output  [31:0] float_stream_TUSER;
output  [0:0] float_stream_TLAST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_ready;
wire    ap_CS_fsm_pp0_stage2;
reg   [0:0] or_ln255_reg_188;
reg   [0:0] tmp_1_reg_192;
reg    ap_predicate_op37_write_state3;
wire    regslice_both_float_stream_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state3_io;
reg   [0:0] tmp_1_reg_192_pp0_iter1_reg;
reg    ap_block_state6_pp0_stage2_iter1;
reg    ap_block_state6_io;
wire    ap_loop_exit_ready;
reg    ap_block_pp0_stage2_subdone;
reg    ap_condition_exit_pp0_iter0_stage2;
reg    ap_ready_int;
reg    blk_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire   [0:0] or_ln255_fu_127_p2;
wire   [0:0] grp_nbreadreq_fu_76_p3;
reg    float_stream_TDATA_blk_n;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_178;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] last_seen_2_reg_183;
reg    ap_predicate_op32_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] trunc_ln257_fu_132_p1;
reg   [31:0] trunc_ln257_reg_196;
reg   [31:0] tmp_s_reg_201;
reg   [31:0] tmp_2_reg_206;
reg   [0:0] tmp_4_reg_211;
reg    ap_block_pp0_stage2_11001;
wire   [0:0] axis_data_last_fu_156_p2;
reg   [0:0] axis_data_last_reg_216;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] last_seen_fu_72;
wire   [0:0] last_seen_3_fu_161_p2;
wire    ap_loop_init;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] xor_ln255_fu_121_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    regslice_both_blk_stream_U_apdone_blk;
wire   [95:0] blk_stream_TDATA_int_regslice;
wire    blk_stream_TVALID_int_regslice;
reg    blk_stream_TREADY_int_regslice;
wire    regslice_both_blk_stream_U_ack_in;
reg   [31:0] float_stream_TDATA_int_regslice;
reg    float_stream_TVALID_int_regslice;
wire    float_stream_TREADY_int_regslice;
wire    regslice_both_float_stream_V_data_V_U_vld_out;
wire    regslice_both_float_stream_V_keep_V_U_apdone_blk;
wire   [3:0] float_stream_TKEEP_int_regslice;
wire    regslice_both_float_stream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_float_stream_V_keep_V_U_vld_out;
wire    regslice_both_float_stream_V_strb_V_U_apdone_blk;
wire   [3:0] float_stream_TSTRB_int_regslice;
wire    regslice_both_float_stream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_float_stream_V_strb_V_U_vld_out;
wire    regslice_both_float_stream_V_user_V_U_apdone_blk;
wire   [31:0] float_stream_TUSER_int_regslice;
wire    regslice_both_float_stream_V_user_V_U_ack_in_dummy;
wire    regslice_both_float_stream_V_user_V_U_vld_out;
wire    regslice_both_float_stream_V_last_V_U_apdone_blk;
reg   [0:0] float_stream_TLAST_int_regslice;
wire    regslice_both_float_stream_V_last_V_U_ack_in_dummy;
wire    regslice_both_float_stream_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 last_seen_fu_72 = 1'd0;
#0 ap_done_reg = 1'b0;
end

unpack_blk_to_stream_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

unpack_blk_to_stream_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

unpack_blk_to_stream_regslice_both #(
    .DataWidth( 96 ))
regslice_both_blk_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(blk_stream_TDATA),
    .vld_in(blk_stream_TVALID),
    .ack_in(regslice_both_blk_stream_U_ack_in),
    .data_out(blk_stream_TDATA_int_regslice),
    .vld_out(blk_stream_TVALID_int_regslice),
    .ack_out(blk_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_blk_stream_U_apdone_blk)
);

unpack_blk_to_stream_regslice_both #(
    .DataWidth( 32 ))
regslice_both_float_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TDATA_int_regslice),
    .vld_in(float_stream_TVALID_int_regslice),
    .ack_in(float_stream_TREADY_int_regslice),
    .data_out(float_stream_TDATA),
    .vld_out(regslice_both_float_stream_V_data_V_U_vld_out),
    .ack_out(float_stream_TREADY),
    .apdone_blk(regslice_both_float_stream_V_data_V_U_apdone_blk)
);

unpack_blk_to_stream_regslice_both #(
    .DataWidth( 4 ))
regslice_both_float_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TKEEP_int_regslice),
    .vld_in(float_stream_TVALID_int_regslice),
    .ack_in(regslice_both_float_stream_V_keep_V_U_ack_in_dummy),
    .data_out(float_stream_TKEEP),
    .vld_out(regslice_both_float_stream_V_keep_V_U_vld_out),
    .ack_out(float_stream_TREADY),
    .apdone_blk(regslice_both_float_stream_V_keep_V_U_apdone_blk)
);

unpack_blk_to_stream_regslice_both #(
    .DataWidth( 4 ))
regslice_both_float_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TSTRB_int_regslice),
    .vld_in(float_stream_TVALID_int_regslice),
    .ack_in(regslice_both_float_stream_V_strb_V_U_ack_in_dummy),
    .data_out(float_stream_TSTRB),
    .vld_out(regslice_both_float_stream_V_strb_V_U_vld_out),
    .ack_out(float_stream_TREADY),
    .apdone_blk(regslice_both_float_stream_V_strb_V_U_apdone_blk)
);

unpack_blk_to_stream_regslice_both #(
    .DataWidth( 32 ))
regslice_both_float_stream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TUSER_int_regslice),
    .vld_in(float_stream_TVALID_int_regslice),
    .ack_in(regslice_both_float_stream_V_user_V_U_ack_in_dummy),
    .data_out(float_stream_TUSER),
    .vld_out(regslice_both_float_stream_V_user_V_U_vld_out),
    .ack_out(float_stream_TREADY),
    .apdone_blk(regslice_both_float_stream_V_user_V_U_apdone_blk)
);

unpack_blk_to_stream_regslice_both #(
    .DataWidth( 1 ))
regslice_both_float_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TLAST_int_regslice),
    .vld_in(float_stream_TVALID_int_regslice),
    .ack_in(regslice_both_float_stream_V_last_V_U_ack_in_dummy),
    .data_out(float_stream_TLAST),
    .vld_out(regslice_both_float_stream_V_last_V_U_vld_out),
    .ack_out(float_stream_TREADY),
    .apdone_blk(regslice_both_float_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
            last_seen_fu_72 <= 1'd0;
        end else if (((tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            last_seen_fu_72 <= last_seen_3_fu_161_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axis_data_last_reg_216 <= axis_data_last_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        last_seen_2_reg_183 <= last_seen_fu_72;
        or_ln255_reg_188 <= or_ln255_fu_127_p2;
        tmp_1_reg_192_pp0_iter1_reg <= tmp_1_reg_192;
        tmp_2_reg_206 <= {{blk_stream_TDATA_int_regslice[95:64]}};
        tmp_s_reg_201 <= {{blk_stream_TDATA_int_regslice[63:32]}};
        trunc_ln257_reg_196 <= trunc_ln257_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_1_reg_192 <= grp_nbreadreq_fu_76_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_4_reg_211 <= grp_nbreadreq_fu_76_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_178 <= grp_nbreadreq_fu_76_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (grp_nbreadreq_fu_76_p3 == 1'd1) & (or_ln255_fu_127_p2 == 1'd1))) begin
        blk_stream_TDATA_blk_n = blk_stream_TVALID_int_regslice;
    end else begin
        blk_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op32_read_state2 == 1'b1))) begin
        blk_stream_TREADY_int_regslice = 1'b1;
    end else begin
        blk_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_1_reg_192_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage2) & (ap_predicate_op37_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        float_stream_TDATA_blk_n = float_stream_TREADY_int_regslice;
    end else begin
        float_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        float_stream_TDATA_int_regslice = tmp_2_reg_206;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        float_stream_TDATA_int_regslice = tmp_s_reg_201;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (ap_predicate_op37_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        float_stream_TDATA_int_regslice = trunc_ln257_reg_196;
    end else begin
        float_stream_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_01001) & (tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        float_stream_TLAST_int_regslice = axis_data_last_reg_216;
    end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_01001) & (ap_predicate_op37_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        float_stream_TLAST_int_regslice = 1'd0;
    end else begin
        float_stream_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op37_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_reg_192 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        float_stream_TVALID_int_regslice = 1'b1;
    end else begin
        float_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter1)) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter1))) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter1))) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage1_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | (1'b1 == ap_block_state5_pp0_stage1_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | (1'b1 == ap_block_state5_pp0_stage1_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage2_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0)) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | (1'b1 == ap_block_state6_pp0_stage2_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage2_iter0))) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | (1'b1 == ap_block_state6_pp0_stage2_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage2_iter0))) | ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) & (or_ln255_reg_188 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((blk_stream_TVALID_int_regslice == 1'b0) & (ap_predicate_op32_read_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op37_write_state3 == 1'b1) & (float_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((regslice_both_float_stream_V_data_V_U_apdone_blk == 1'b1) | ((ap_predicate_op37_write_state3 == 1'b1) & (float_stream_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = ((tmp_1_reg_192 == 1'd1) & (float_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((tmp_1_reg_192 == 1'd1) & (float_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((tmp_1_reg_192 == 1'd1) & (float_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((tmp_1_reg_192 == 1'd1) & (float_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((tmp_1_reg_192_pp0_iter1_reg == 1'd1) & (float_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage2_iter1 = ((tmp_1_reg_192_pp0_iter1_reg == 1'd1) & (float_stream_TREADY_int_regslice == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

always @ (*) begin
    ap_predicate_op32_read_state2 = ((grp_nbreadreq_fu_76_p3 == 1'd1) & (or_ln255_fu_127_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op37_write_state3 = ((tmp_1_reg_192 == 1'd1) & (or_ln255_reg_188 == 1'd1));
end

assign ap_ready = ap_ready_sig;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axis_data_last_fu_156_p2 = (tmp_4_reg_211 ^ 1'd1);

assign blk_stream_TREADY = regslice_both_blk_stream_U_ack_in;

assign float_stream_TKEEP_int_regslice = 'bx;

assign float_stream_TSTRB_int_regslice = 'bx;

assign float_stream_TUSER_int_regslice = 'bx;

assign float_stream_TVALID = regslice_both_float_stream_V_data_V_U_vld_out;

assign grp_nbreadreq_fu_76_p3 = blk_stream_TVALID_int_regslice;

assign last_seen_3_fu_161_p2 = (last_seen_2_reg_183 | axis_data_last_fu_156_p2);

assign or_ln255_fu_127_p2 = (xor_ln255_fu_121_p2 | tmp_reg_178);

assign trunc_ln257_fu_132_p1 = blk_stream_TDATA_int_regslice[31:0];

assign xor_ln255_fu_121_p2 = (last_seen_fu_72 ^ 1'd1);

endmodule //unpack_blk_to_stream
