-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity unpack_blk_to_stream is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    float_stream_TREADY : IN STD_LOGIC;
    blk_stream_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    blk_stream_TVALID : IN STD_LOGIC;
    blk_stream_TREADY : OUT STD_LOGIC;
    float_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    float_stream_TVALID : OUT STD_LOGIC;
    float_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    float_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    float_stream_TUSER : OUT STD_LOGIC_VECTOR (31 downto 0);
    float_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of unpack_blk_to_stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "unpack_blk_to_stream_unpack_blk_to_stream,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.544000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=146,HLS_SYN_LUT=186,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal or_ln255_reg_188 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_192 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op37_write_state3 : BOOLEAN;
    signal regslice_both_float_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal tmp_1_reg_192_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal blk_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal or_ln255_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nbreadreq_fu_76_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal float_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_reg_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal last_seen_2_reg_183 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op32_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln257_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln257_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_211 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal axis_data_last_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_data_last_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal last_seen_fu_72 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal last_seen_3_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal xor_ln255_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal regslice_both_blk_stream_U_apdone_blk : STD_LOGIC;
    signal blk_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal blk_stream_TVALID_int_regslice : STD_LOGIC;
    signal blk_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_blk_stream_U_ack_in : STD_LOGIC;
    signal float_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal float_stream_TVALID_int_regslice : STD_LOGIC;
    signal float_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_float_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_float_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal float_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_float_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_float_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_float_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal float_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_float_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_float_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_float_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal float_stream_TUSER_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_both_float_stream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_float_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_float_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal float_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_float_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_float_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component unpack_blk_to_stream_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component unpack_blk_to_stream_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component unpack_blk_to_stream_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    CTRL_s_axi_U : component unpack_blk_to_stream_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    flow_control_loop_pipe_U : component unpack_blk_to_stream_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);

    regslice_both_blk_stream_U : component unpack_blk_to_stream_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => blk_stream_TDATA,
        vld_in => blk_stream_TVALID,
        ack_in => regslice_both_blk_stream_U_ack_in,
        data_out => blk_stream_TDATA_int_regslice,
        vld_out => blk_stream_TVALID_int_regslice,
        ack_out => blk_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_blk_stream_U_apdone_blk);

    regslice_both_float_stream_V_data_V_U : component unpack_blk_to_stream_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => float_stream_TDATA_int_regslice,
        vld_in => float_stream_TVALID_int_regslice,
        ack_in => float_stream_TREADY_int_regslice,
        data_out => float_stream_TDATA,
        vld_out => regslice_both_float_stream_V_data_V_U_vld_out,
        ack_out => float_stream_TREADY,
        apdone_blk => regslice_both_float_stream_V_data_V_U_apdone_blk);

    regslice_both_float_stream_V_keep_V_U : component unpack_blk_to_stream_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => float_stream_TKEEP_int_regslice,
        vld_in => float_stream_TVALID_int_regslice,
        ack_in => regslice_both_float_stream_V_keep_V_U_ack_in_dummy,
        data_out => float_stream_TKEEP,
        vld_out => regslice_both_float_stream_V_keep_V_U_vld_out,
        ack_out => float_stream_TREADY,
        apdone_blk => regslice_both_float_stream_V_keep_V_U_apdone_blk);

    regslice_both_float_stream_V_strb_V_U : component unpack_blk_to_stream_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => float_stream_TSTRB_int_regslice,
        vld_in => float_stream_TVALID_int_regslice,
        ack_in => regslice_both_float_stream_V_strb_V_U_ack_in_dummy,
        data_out => float_stream_TSTRB,
        vld_out => regslice_both_float_stream_V_strb_V_U_vld_out,
        ack_out => float_stream_TREADY,
        apdone_blk => regslice_both_float_stream_V_strb_V_U_apdone_blk);

    regslice_both_float_stream_V_user_V_U : component unpack_blk_to_stream_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => float_stream_TUSER_int_regslice,
        vld_in => float_stream_TVALID_int_regslice,
        ack_in => regslice_both_float_stream_V_user_V_U_ack_in_dummy,
        data_out => float_stream_TUSER,
        vld_out => regslice_both_float_stream_V_user_V_U_vld_out,
        ack_out => float_stream_TREADY,
        apdone_blk => regslice_both_float_stream_V_user_V_U_apdone_blk);

    regslice_both_float_stream_V_last_V_U : component unpack_blk_to_stream_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => float_stream_TLAST_int_regslice,
        vld_in => float_stream_TVALID_int_regslice,
        ack_in => regslice_both_float_stream_V_last_V_U_ack_in_dummy,
        data_out => float_stream_TLAST,
        vld_out => regslice_both_float_stream_V_last_V_U_vld_out,
        ack_out => float_stream_TREADY,
        apdone_blk => regslice_both_float_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    last_seen_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    last_seen_fu_72 <= ap_const_lv1_0;
                elsif (((tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    last_seen_fu_72 <= last_seen_3_fu_161_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axis_data_last_reg_216 <= axis_data_last_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                last_seen_2_reg_183 <= last_seen_fu_72;
                or_ln255_reg_188 <= or_ln255_fu_127_p2;
                tmp_1_reg_192_pp0_iter1_reg <= tmp_1_reg_192;
                tmp_2_reg_206 <= blk_stream_TDATA_int_regslice(95 downto 64);
                tmp_s_reg_201 <= blk_stream_TDATA_int_regslice(63 downto 32);
                trunc_ln257_reg_196 <= trunc_ln257_fu_132_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_1_reg_192 <= grp_nbreadreq_fu_76_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_4_reg_211 <= grp_nbreadreq_fu_76_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_178 <= grp_nbreadreq_fu_76_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state4_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter1)) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state4_pp0_stage0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter1))) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state4_pp0_stage0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter1))) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state2_pp0_stage1_iter0, ap_block_state5_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage1_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0)) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state2_pp0_stage1_iter0, ap_block_state5_pp0_stage1_iter1, ap_block_state5_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or (ap_const_boolean_1 = ap_block_state5_pp0_stage1_iter1))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0)) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state2_pp0_stage1_iter0, ap_block_state5_pp0_stage1_iter1, ap_block_state5_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or (ap_const_boolean_1 = ap_block_state5_pp0_stage1_iter1))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0)) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state3_pp0_stage2_iter0, ap_block_state6_pp0_stage2_iter1)
    begin
                ap_block_pp0_stage2_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage2_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0)) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state3_pp0_stage2_iter0, ap_block_state3_io, ap_block_state6_pp0_stage2_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or (ap_const_boolean_1 = ap_block_state6_pp0_stage2_iter1))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0))) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, regslice_both_float_stream_V_data_V_U_apdone_blk, ap_block_state3_pp0_stage2_iter0, ap_block_state3_io, ap_block_state6_pp0_stage2_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or (ap_const_boolean_1 = ap_block_state6_pp0_stage2_iter1))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0))) or ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(ap_predicate_op32_read_state2, blk_stream_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((blk_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op32_read_state2 = ap_const_boolean_1));
    end process;


    ap_block_state3_io_assign_proc : process(ap_predicate_op37_write_state3, float_stream_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((ap_predicate_op37_write_state3 = ap_const_boolean_1) and (float_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(ap_predicate_op37_write_state3, regslice_both_float_stream_V_data_V_U_apdone_blk, float_stream_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((regslice_both_float_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op37_write_state3 = ap_const_boolean_1) and (float_stream_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state4_io_assign_proc : process(tmp_1_reg_192, float_stream_TREADY_int_regslice)
    begin
                ap_block_state4_io <= ((tmp_1_reg_192 = ap_const_lv1_1) and (float_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(tmp_1_reg_192, float_stream_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((tmp_1_reg_192 = ap_const_lv1_1) and (float_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(tmp_1_reg_192, float_stream_TREADY_int_regslice)
    begin
                ap_block_state5_io <= ((tmp_1_reg_192 = ap_const_lv1_1) and (float_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage1_iter1_assign_proc : process(tmp_1_reg_192, float_stream_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage1_iter1 <= ((tmp_1_reg_192 = ap_const_lv1_1) and (float_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(tmp_1_reg_192_pp0_iter1_reg, float_stream_TREADY_int_regslice)
    begin
                ap_block_state6_io <= ((tmp_1_reg_192_pp0_iter1_reg = ap_const_lv1_1) and (float_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage2_iter1_assign_proc : process(tmp_1_reg_192_pp0_iter1_reg, float_stream_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage2_iter1 <= ((tmp_1_reg_192_pp0_iter1_reg = ap_const_lv1_1) and (float_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, or_ln255_reg_188, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (or_ln255_reg_188 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_loop_exit_ready, ap_block_pp0_stage2_subdone, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_predicate_op32_read_state2_assign_proc : process(or_ln255_fu_127_p2, grp_nbreadreq_fu_76_p3)
    begin
                ap_predicate_op32_read_state2 <= ((grp_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (or_ln255_fu_127_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op37_write_state3_assign_proc : process(or_ln255_reg_188, tmp_1_reg_192)
    begin
                ap_predicate_op37_write_state3 <= ((tmp_1_reg_192 = ap_const_lv1_1) and (or_ln255_reg_188 = ap_const_lv1_1));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axis_data_last_fu_156_p2 <= (tmp_4_reg_211 xor ap_const_lv1_1);

    blk_stream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, or_ln255_fu_127_p2, grp_nbreadreq_fu_76_p3, blk_stream_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (grp_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (or_ln255_fu_127_p2 = ap_const_lv1_1))) then 
            blk_stream_TDATA_blk_n <= blk_stream_TVALID_int_regslice;
        else 
            blk_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    blk_stream_TREADY <= regslice_both_blk_stream_U_ack_in;

    blk_stream_TREADY_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op32_read_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_predicate_op32_read_state2 = ap_const_boolean_1))) then 
            blk_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            blk_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    float_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, tmp_1_reg_192, ap_predicate_op37_write_state3, tmp_1_reg_192_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0, float_stream_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_1_reg_192_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_predicate_op37_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            float_stream_TDATA_blk_n <= float_stream_TREADY_int_regslice;
        else 
            float_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    float_stream_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, tmp_1_reg_192, ap_predicate_op37_write_state3, ap_CS_fsm_pp0_stage1, trunc_ln257_reg_196, tmp_s_reg_201, tmp_2_reg_206, ap_block_pp0_stage2_01001, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            float_stream_TDATA_int_regslice <= tmp_2_reg_206;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            float_stream_TDATA_int_regslice <= tmp_s_reg_201;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_predicate_op37_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            float_stream_TDATA_int_regslice <= trunc_ln257_reg_196;
        else 
            float_stream_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    float_stream_TKEEP_int_regslice <= "XXXX";

    float_stream_TLAST_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, tmp_1_reg_192, ap_predicate_op37_write_state3, ap_CS_fsm_pp0_stage1, axis_data_last_reg_216, ap_block_pp0_stage2_01001, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            float_stream_TLAST_int_regslice <= axis_data_last_reg_216;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_predicate_op37_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            float_stream_TLAST_int_regslice <= ap_const_lv1_0;
        else 
            float_stream_TLAST_int_regslice <= "X";
        end if; 
    end process;

    float_stream_TSTRB_int_regslice <= "XXXX";
    float_stream_TUSER_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    float_stream_TVALID <= regslice_both_float_stream_V_data_V_U_vld_out;

    float_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, tmp_1_reg_192, ap_predicate_op37_write_state3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op37_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_192 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            float_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            float_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    grp_nbreadreq_fu_76_p3 <= (0=>(blk_stream_TVALID_int_regslice), others=>'-');
    last_seen_3_fu_161_p2 <= (last_seen_2_reg_183 or axis_data_last_fu_156_p2);
    or_ln255_fu_127_p2 <= (xor_ln255_fu_121_p2 or tmp_reg_178);
    trunc_ln257_fu_132_p1 <= blk_stream_TDATA_int_regslice(32 - 1 downto 0);
    xor_ln255_fu_121_p2 <= (last_seen_fu_72 xor ap_const_lv1_1);
end behav;
