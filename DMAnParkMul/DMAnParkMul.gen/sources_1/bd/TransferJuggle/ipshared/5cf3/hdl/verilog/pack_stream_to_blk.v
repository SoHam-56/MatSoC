// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pack_stream_to_blk_pack_stream_to_blk,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.140000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=305,HLS_SYN_LUT=428,HLS_VERSION=2024_1}" *)

module pack_stream_to_blk (
        ap_clk,
        ap_rst_n,
        float_stream_TVALID,
        blk_stream_TREADY,
        float_stream_TDATA,
        float_stream_TREADY,
        float_stream_TKEEP,
        float_stream_TSTRB,
        float_stream_TUSER,
        float_stream_TLAST,
        blk_stream_TDATA,
        blk_stream_TVALID,
        s_axi_CTRL_STRM_BLK_AWVALID,
        s_axi_CTRL_STRM_BLK_AWREADY,
        s_axi_CTRL_STRM_BLK_AWADDR,
        s_axi_CTRL_STRM_BLK_WVALID,
        s_axi_CTRL_STRM_BLK_WREADY,
        s_axi_CTRL_STRM_BLK_WDATA,
        s_axi_CTRL_STRM_BLK_WSTRB,
        s_axi_CTRL_STRM_BLK_ARVALID,
        s_axi_CTRL_STRM_BLK_ARREADY,
        s_axi_CTRL_STRM_BLK_ARADDR,
        s_axi_CTRL_STRM_BLK_RVALID,
        s_axi_CTRL_STRM_BLK_RREADY,
        s_axi_CTRL_STRM_BLK_RDATA,
        s_axi_CTRL_STRM_BLK_RRESP,
        s_axi_CTRL_STRM_BLK_BVALID,
        s_axi_CTRL_STRM_BLK_BREADY,
        s_axi_CTRL_STRM_BLK_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;
parameter    C_S_AXI_CTRL_STRM_BLK_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_STRM_BLK_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_STRM_BLK_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   float_stream_TVALID;
input   blk_stream_TREADY;
input  [31:0] float_stream_TDATA;
output   float_stream_TREADY;
input  [3:0] float_stream_TKEEP;
input  [3:0] float_stream_TSTRB;
input  [31:0] float_stream_TUSER;
input  [0:0] float_stream_TLAST;
output  [95:0] blk_stream_TDATA;
output   blk_stream_TVALID;
input   s_axi_CTRL_STRM_BLK_AWVALID;
output   s_axi_CTRL_STRM_BLK_AWREADY;
input  [C_S_AXI_CTRL_STRM_BLK_ADDR_WIDTH - 1:0] s_axi_CTRL_STRM_BLK_AWADDR;
input   s_axi_CTRL_STRM_BLK_WVALID;
output   s_axi_CTRL_STRM_BLK_WREADY;
input  [C_S_AXI_CTRL_STRM_BLK_DATA_WIDTH - 1:0] s_axi_CTRL_STRM_BLK_WDATA;
input  [C_S_AXI_CTRL_STRM_BLK_WSTRB_WIDTH - 1:0] s_axi_CTRL_STRM_BLK_WSTRB;
input   s_axi_CTRL_STRM_BLK_ARVALID;
output   s_axi_CTRL_STRM_BLK_ARREADY;
input  [C_S_AXI_CTRL_STRM_BLK_ADDR_WIDTH - 1:0] s_axi_CTRL_STRM_BLK_ARADDR;
output   s_axi_CTRL_STRM_BLK_RVALID;
input   s_axi_CTRL_STRM_BLK_RREADY;
output  [C_S_AXI_CTRL_STRM_BLK_DATA_WIDTH - 1:0] s_axi_CTRL_STRM_BLK_RDATA;
output  [1:0] s_axi_CTRL_STRM_BLK_RRESP;
output   s_axi_CTRL_STRM_BLK_BVALID;
input   s_axi_CTRL_STRM_BLK_BREADY;
output  [1:0] s_axi_CTRL_STRM_BLK_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_ready;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] or_ln96_reg_299;
reg   [0:0] tmp_1_reg_303;
reg    ap_predicate_op43_read_state2;
wire    regslice_both_blk_stream_U_apdone_blk;
reg    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] tmp_1_reg_303_pp0_iter1_reg;
reg   [0:0] or_ln107_reg_340;
reg    ap_predicate_op64_write_state4;
reg    ap_block_state4_pp0_stage1_iter1;
reg    ap_block_state4_io;
wire    ap_loop_exit_ready;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
reg    ap_ready_int;
reg    float_stream_TDATA_blk_n;
wire    ap_block_pp0_stage1;
reg    blk_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] last_seen_2_reg_294;
reg    ap_predicate_op62_write_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln96_fu_138_p2;
wire   [0:0] grp_nbreadreq_fu_82_p7;
wire   [0:0] icmp_ln102_fu_147_p2;
reg   [0:0] icmp_ln102_reg_307;
wire   [0:0] icmp_ln102_1_fu_153_p2;
reg   [0:0] icmp_ln102_1_reg_313;
wire   [31:0] blk_idx_1_fu_159_p2;
reg   [31:0] blk_idx_1_reg_319;
wire   [31:0] empty_13_fu_186_p3;
reg   [31:0] empty_13_reg_325;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] empty_14_fu_194_p3;
reg   [31:0] empty_14_reg_330;
wire   [31:0] empty_15_fu_201_p3;
reg   [31:0] empty_15_reg_335;
wire   [0:0] or_ln107_fu_213_p2;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] last_seen_fu_62;
wire   [0:0] last_seen_3_fu_219_p2;
wire    ap_loop_init;
reg   [0:0] ap_sig_allocacmp_last_seen_2;
reg   [31:0] blk_idx_fu_66;
reg   [31:0] ap_sig_allocacmp_blk_idx_load;
reg   [31:0] empty_fu_70;
reg   [31:0] empty_10_fu_74;
reg   [31:0] empty_11_fu_78;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] xor_ln96_fu_132_p2;
wire   [0:0] or_ln102_fu_182_p2;
wire   [0:0] icmp_ln107_fu_208_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    regslice_both_float_stream_V_data_V_U_apdone_blk;
wire   [31:0] float_stream_TDATA_int_regslice;
wire    float_stream_TVALID_int_regslice;
reg    float_stream_TREADY_int_regslice;
wire    regslice_both_float_stream_V_data_V_U_ack_in;
wire    regslice_both_float_stream_V_keep_V_U_apdone_blk;
wire   [3:0] float_stream_TKEEP_int_regslice;
wire    regslice_both_float_stream_V_keep_V_U_vld_out;
wire    regslice_both_float_stream_V_keep_V_U_ack_in;
wire    regslice_both_float_stream_V_strb_V_U_apdone_blk;
wire   [3:0] float_stream_TSTRB_int_regslice;
wire    regslice_both_float_stream_V_strb_V_U_vld_out;
wire    regslice_both_float_stream_V_strb_V_U_ack_in;
wire    regslice_both_float_stream_V_user_V_U_apdone_blk;
wire   [31:0] float_stream_TUSER_int_regslice;
wire    regslice_both_float_stream_V_user_V_U_vld_out;
wire    regslice_both_float_stream_V_user_V_U_ack_in;
wire    regslice_both_float_stream_V_last_V_U_apdone_blk;
wire   [0:0] float_stream_TLAST_int_regslice;
wire    regslice_both_float_stream_V_last_V_U_vld_out;
wire    regslice_both_float_stream_V_last_V_U_ack_in;
wire   [95:0] blk_stream_TDATA_int_regslice;
reg    blk_stream_TVALID_int_regslice;
wire    blk_stream_TREADY_int_regslice;
wire    regslice_both_blk_stream_U_vld_out;
reg    ap_condition_414;
reg    ap_condition_418;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 last_seen_fu_62 = 1'd0;
#0 blk_idx_fu_66 = 32'd0;
#0 empty_fu_70 = 32'd0;
#0 empty_10_fu_74 = 32'd0;
#0 empty_11_fu_78 = 32'd0;
#0 ap_done_reg = 1'b0;
end

pack_stream_to_blk_CTRL_STRM_BLK_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_STRM_BLK_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_STRM_BLK_DATA_WIDTH ))
CTRL_STRM_BLK_s_axi_U(
    .AWVALID(s_axi_CTRL_STRM_BLK_AWVALID),
    .AWREADY(s_axi_CTRL_STRM_BLK_AWREADY),
    .AWADDR(s_axi_CTRL_STRM_BLK_AWADDR),
    .WVALID(s_axi_CTRL_STRM_BLK_WVALID),
    .WREADY(s_axi_CTRL_STRM_BLK_WREADY),
    .WDATA(s_axi_CTRL_STRM_BLK_WDATA),
    .WSTRB(s_axi_CTRL_STRM_BLK_WSTRB),
    .ARVALID(s_axi_CTRL_STRM_BLK_ARVALID),
    .ARREADY(s_axi_CTRL_STRM_BLK_ARREADY),
    .ARADDR(s_axi_CTRL_STRM_BLK_ARADDR),
    .RVALID(s_axi_CTRL_STRM_BLK_RVALID),
    .RREADY(s_axi_CTRL_STRM_BLK_RREADY),
    .RDATA(s_axi_CTRL_STRM_BLK_RDATA),
    .RRESP(s_axi_CTRL_STRM_BLK_RRESP),
    .BVALID(s_axi_CTRL_STRM_BLK_BVALID),
    .BREADY(s_axi_CTRL_STRM_BLK_BREADY),
    .BRESP(s_axi_CTRL_STRM_BLK_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

pack_stream_to_blk_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 32 ))
regslice_both_float_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TDATA),
    .vld_in(float_stream_TVALID),
    .ack_in(regslice_both_float_stream_V_data_V_U_ack_in),
    .data_out(float_stream_TDATA_int_regslice),
    .vld_out(float_stream_TVALID_int_regslice),
    .ack_out(float_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_float_stream_V_data_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 4 ))
regslice_both_float_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TKEEP),
    .vld_in(float_stream_TVALID),
    .ack_in(regslice_both_float_stream_V_keep_V_U_ack_in),
    .data_out(float_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_float_stream_V_keep_V_U_vld_out),
    .ack_out(float_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_float_stream_V_keep_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 4 ))
regslice_both_float_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TSTRB),
    .vld_in(float_stream_TVALID),
    .ack_in(regslice_both_float_stream_V_strb_V_U_ack_in),
    .data_out(float_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_float_stream_V_strb_V_U_vld_out),
    .ack_out(float_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_float_stream_V_strb_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 32 ))
regslice_both_float_stream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TUSER),
    .vld_in(float_stream_TVALID),
    .ack_in(regslice_both_float_stream_V_user_V_U_ack_in),
    .data_out(float_stream_TUSER_int_regslice),
    .vld_out(regslice_both_float_stream_V_user_V_U_vld_out),
    .ack_out(float_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_float_stream_V_user_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 1 ))
regslice_both_float_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(float_stream_TLAST),
    .vld_in(float_stream_TVALID),
    .ack_in(regslice_both_float_stream_V_last_V_U_ack_in),
    .data_out(float_stream_TLAST_int_regslice),
    .vld_out(regslice_both_float_stream_V_last_V_U_vld_out),
    .ack_out(float_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_float_stream_V_last_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 96 ))
regslice_both_blk_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(blk_stream_TDATA_int_regslice),
    .vld_in(blk_stream_TVALID_int_regslice),
    .ack_in(blk_stream_TREADY_int_regslice),
    .data_out(blk_stream_TDATA),
    .vld_out(regslice_both_blk_stream_U_vld_out),
    .ack_out(blk_stream_TREADY),
    .apdone_blk(regslice_both_blk_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (or_ln107_reg_340 == 1'd1) & (tmp_1_reg_303 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        blk_idx_fu_66 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln107_reg_340 == 1'd0) & (tmp_1_reg_303 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        blk_idx_fu_66 <= blk_idx_1_reg_319;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_418)) begin
            last_seen_fu_62 <= 1'd0;
        end else if ((1'b1 == ap_condition_414)) begin
            last_seen_fu_62 <= last_seen_3_fu_219_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        blk_idx_1_reg_319 <= blk_idx_1_fu_159_p2;
        icmp_ln102_1_reg_313 <= icmp_ln102_1_fu_153_p2;
        icmp_ln102_reg_307 <= icmp_ln102_fu_147_p2;
        last_seen_2_reg_294 <= ap_sig_allocacmp_last_seen_2;
        or_ln96_reg_299 <= or_ln96_fu_138_p2;
        tmp_1_reg_303_pp0_iter1_reg <= tmp_1_reg_303;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_1_reg_303 == 1'd1) & (or_ln96_reg_299 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_10_fu_74 <= empty_14_fu_194_p3;
        empty_11_fu_78 <= empty_13_fu_186_p3;
        empty_fu_70 <= empty_15_fu_201_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_13_reg_325 <= empty_13_fu_186_p3;
        empty_14_reg_330 <= empty_14_fu_194_p3;
        empty_15_reg_335 <= empty_15_fu_201_p3;
        or_ln107_reg_340 <= or_ln107_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_303 <= grp_nbreadreq_fu_82_p7;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (or_ln96_reg_299 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (or_ln107_reg_340 == 1'd1) & (tmp_1_reg_303 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_sig_allocacmp_blk_idx_load = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (or_ln107_reg_340 == 1'd0) & (tmp_1_reg_303 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_blk_idx_load = blk_idx_1_reg_319;
    end else begin
        ap_sig_allocacmp_blk_idx_load = blk_idx_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_last_seen_2 = 1'd0;
    end else begin
        ap_sig_allocacmp_last_seen_2 = last_seen_fu_62;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (or_ln107_reg_340 == 1'd1) & (tmp_1_reg_303 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_predicate_op64_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        blk_stream_TDATA_blk_n = blk_stream_TREADY_int_regslice;
    end else begin
        blk_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op62_write_state3 == 1'b1))) begin
        blk_stream_TVALID_int_regslice = 1'b1;
    end else begin
        blk_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_predicate_op43_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        float_stream_TDATA_blk_n = float_stream_TVALID_int_regslice;
    end else begin
        float_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op43_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        float_stream_TREADY_int_regslice = 1'b1;
    end else begin
        float_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1)) | ((regslice_both_blk_stream_U_apdone_blk == 1'b1) & (or_ln96_reg_299 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter1))) | ((regslice_both_blk_stream_U_apdone_blk == 1'b1) & (or_ln96_reg_299 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter1))) | ((regslice_both_blk_stream_U_apdone_blk == 1'b1) & (or_ln96_reg_299 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage1_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((regslice_both_blk_stream_U_apdone_blk == 1'b1) & (or_ln96_reg_299 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage1_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0)) | ((regslice_both_blk_stream_U_apdone_blk == 1'b1) & (or_ln96_reg_299 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((regslice_both_blk_stream_U_apdone_blk == 1'b1) | ((ap_predicate_op43_read_state2 == 1'b1) & (float_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((blk_stream_TREADY_int_regslice == 1'b0) & (ap_predicate_op62_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((blk_stream_TREADY_int_regslice == 1'b0) & (ap_predicate_op62_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state4_io = ((ap_predicate_op64_write_state4 == 1'b1) & (blk_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter1 = ((ap_predicate_op64_write_state4 == 1'b1) & (blk_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_414 = ((1'b0 == ap_block_pp0_stage1_11001) & (tmp_1_reg_303 == 1'd1) & (or_ln96_reg_299 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_418 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op43_read_state2 = ((tmp_1_reg_303 == 1'd1) & (or_ln96_reg_299 == 1'd1));
end

always @ (*) begin
    ap_predicate_op62_write_state3 = ((or_ln107_reg_340 == 1'd1) & (tmp_1_reg_303 == 1'd1));
end

always @ (*) begin
    ap_predicate_op64_write_state4 = ((or_ln107_reg_340 == 1'd1) & (tmp_1_reg_303_pp0_iter1_reg == 1'd1));
end

assign ap_ready = ap_ready_sig;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign blk_idx_1_fu_159_p2 = (ap_sig_allocacmp_blk_idx_load + 32'd1);

assign blk_stream_TDATA_int_regslice = {{{empty_13_reg_325}, {empty_14_reg_330}}, {empty_15_reg_335}};

assign blk_stream_TVALID = regslice_both_blk_stream_U_vld_out;

assign empty_13_fu_186_p3 = ((or_ln102_fu_182_p2[0:0] == 1'b1) ? empty_11_fu_78 : float_stream_TDATA_int_regslice);

assign empty_14_fu_194_p3 = ((icmp_ln102_1_reg_313[0:0] == 1'b1) ? float_stream_TDATA_int_regslice : empty_10_fu_74);

assign empty_15_fu_201_p3 = ((icmp_ln102_reg_307[0:0] == 1'b1) ? float_stream_TDATA_int_regslice : empty_fu_70);

assign float_stream_TREADY = regslice_both_float_stream_V_data_V_U_ack_in;

assign grp_nbreadreq_fu_82_p7 = float_stream_TVALID_int_regslice;

assign icmp_ln102_1_fu_153_p2 = ((ap_sig_allocacmp_blk_idx_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_147_p2 = ((ap_sig_allocacmp_blk_idx_load == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_208_p2 = ((blk_idx_1_reg_319 == 32'd3) ? 1'b1 : 1'b0);

assign last_seen_3_fu_219_p2 = (last_seen_2_reg_294 | float_stream_TLAST_int_regslice);

assign or_ln102_fu_182_p2 = (icmp_ln102_reg_307 | icmp_ln102_1_reg_313);

assign or_ln107_fu_213_p2 = (icmp_ln107_fu_208_p2 | float_stream_TLAST_int_regslice);

assign or_ln96_fu_138_p2 = (xor_ln96_fu_132_p2 | grp_nbreadreq_fu_82_p7);

assign xor_ln96_fu_132_p2 = (ap_sig_allocacmp_last_seen_2 ^ 1'd1);


reg find_kernel_block = 0;
// synthesis translate_off
`include "pack_stream_to_blk_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //pack_stream_to_blk

