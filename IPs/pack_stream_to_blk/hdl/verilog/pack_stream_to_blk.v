// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pack_stream_to_blk_pack_stream_to_blk,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.806000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=466,HLS_SYN_LUT=901,HLS_VERSION=2024_2}" *)

module pack_stream_to_blk (
        ap_clk,
        ap_rst_n,
        input_stream_TDATA,
        input_stream_TVALID,
        input_stream_TREADY,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TLAST,
        blk_stream_TDATA,
        blk_stream_TVALID,
        blk_stream_TREADY,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_stream_TDATA;
input   input_stream_TVALID;
output   input_stream_TREADY;
input  [3:0] input_stream_TKEEP;
input  [3:0] input_stream_TSTRB;
input  [0:0] input_stream_TLAST;
output  [95:0] blk_stream_TDATA;
output   blk_stream_TVALID;
input   blk_stream_TREADY;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] n;
reg    input_stream_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    blk_stream_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln28_fu_284_p2;
reg   [0:0] and_ln27_reg_444;
wire    ap_CS_fsm_state5;
reg   [0:0] or_ln25_reg_440;
reg   [31:0] n_read_reg_390;
wire   [31:0] sub4_fu_130_p2;
reg   [31:0] sub4_reg_395;
wire   [30:0] i_2_fu_158_p2;
reg   [30:0] i_2_reg_403;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln21_fu_167_p2;
reg   [0:0] icmp_ln21_reg_408;
wire   [0:0] icmp_ln21_1_fu_173_p2;
reg   [0:0] icmp_ln21_1_reg_414;
wire   [31:0] blk_idx_2_fu_179_p2;
reg   [31:0] blk_idx_2_reg_420;
wire   [0:0] icmp_ln25_1_fu_185_p2;
reg   [0:0] icmp_ln25_1_reg_428;
wire   [31:0] data_conv_3_fu_216_p3;
reg   [31:0] data_conv_3_reg_434;
wire   [0:0] or_ln25_fu_228_p2;
wire   [0:0] and_ln27_fu_252_p2;
wire   [63:0] zext_ln28_fu_267_p1;
wire   [63:0] add_ln28_fu_312_p2;
reg    ap_predicate_op86_write_state4;
reg    ap_block_state4;
reg   [63:0] j_1_reg_115;
reg   [31:0] blk_idx_fu_70;
reg    ap_block_state5;
wire   [0:0] icmp_ln13_fu_153_p2;
reg   [30:0] i_fu_74;
reg   [31:0] empty_fu_78;
reg   [31:0] empty_13_fu_82;
wire   [31:0] empty_17_fu_296_p3;
wire   [31:0] data_conv_2_fu_209_p3;
reg   [31:0] empty_14_fu_86;
wire   [31:0] empty_18_fu_304_p3;
wire   [31:0] data_conv_1_fu_201_p3;
wire   [31:0] zext_ln13_fu_149_p1;
wire   [0:0] or_ln21_fu_197_p2;
wire   [0:0] icmp_ln25_fu_223_p2;
wire   [0:0] icmp_ln27_fu_247_p2;
wire   [31:0] trunc_ln28_fu_280_p1;
wire   [0:0] empty_16_fu_290_p2;
wire    regslice_both_blk_stream_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_input_stream_V_data_V_U_apdone_blk;
wire   [31:0] input_stream_TDATA_int_regslice;
wire    input_stream_TVALID_int_regslice;
reg    input_stream_TREADY_int_regslice;
wire    regslice_both_input_stream_V_data_V_U_ack_in;
wire    regslice_both_input_stream_V_keep_V_U_apdone_blk;
wire   [3:0] input_stream_TKEEP_int_regslice;
wire    regslice_both_input_stream_V_keep_V_U_vld_out;
wire    regslice_both_input_stream_V_keep_V_U_ack_in;
wire    regslice_both_input_stream_V_strb_V_U_apdone_blk;
wire   [3:0] input_stream_TSTRB_int_regslice;
wire    regslice_both_input_stream_V_strb_V_U_vld_out;
wire    regslice_both_input_stream_V_strb_V_U_ack_in;
wire    regslice_both_input_stream_V_last_V_U_apdone_blk;
wire   [0:0] input_stream_TLAST_int_regslice;
wire    regslice_both_input_stream_V_last_V_U_vld_out;
wire    regslice_both_input_stream_V_last_V_U_ack_in;
wire   [95:0] blk_stream_TDATA_int_regslice;
reg    blk_stream_TVALID_int_regslice;
wire    blk_stream_TREADY_int_regslice;
wire    regslice_both_blk_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 blk_idx_fu_70 = 32'd0;
#0 i_fu_74 = 31'd0;
#0 empty_fu_78 = 32'd0;
#0 empty_13_fu_82 = 32'd0;
#0 empty_14_fu_86 = 32'd0;
end

pack_stream_to_blk_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .n(n),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_stream_TDATA),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_data_V_U_ack_in),
    .data_out(input_stream_TDATA_int_regslice),
    .vld_out(input_stream_TVALID_int_regslice),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_data_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_stream_TKEEP),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_keep_V_U_ack_in),
    .data_out(input_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_input_stream_V_keep_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_keep_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_stream_TSTRB),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_strb_V_U_ack_in),
    .data_out(input_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_input_stream_V_strb_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_strb_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_stream_TLAST),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_last_V_U_ack_in),
    .data_out(input_stream_TLAST_int_regslice),
    .vld_out(regslice_both_input_stream_V_last_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_last_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 96 ))
regslice_both_blk_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(blk_stream_TDATA_int_regslice),
    .vld_in(blk_stream_TVALID_int_regslice),
    .ack_in(blk_stream_TREADY_int_regslice),
    .data_out(blk_stream_TDATA),
    .vld_out(regslice_both_blk_stream_U_vld_out),
    .ack_out(blk_stream_TREADY),
    .apdone_blk(regslice_both_blk_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln25_fu_228_p2 == 1'd0) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        blk_idx_fu_70 <= blk_idx_2_reg_420;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b0 == ap_block_state5) & (or_ln25_reg_440 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        blk_idx_fu_70 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((or_ln25_fu_228_p2 == 1'd0) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((or_ln25_fu_228_p2 == 1'd1) & (1'd0 == and_ln27_fu_252_p2) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((or_ln25_fu_228_p2 == 1'd1) & (1'd1 == and_ln27_fu_252_p2) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        empty_13_fu_82 <= data_conv_2_fu_209_p3;
    end else if (((1'b0 == ap_block_state4) & (1'd1 == and_ln27_reg_444) & (icmp_ln28_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_13_fu_82 <= empty_17_fu_296_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((or_ln25_fu_228_p2 == 1'd0) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((or_ln25_fu_228_p2 == 1'd1) & (1'd0 == and_ln27_fu_252_p2) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((or_ln25_fu_228_p2 == 1'd1) & (1'd1 == and_ln27_fu_252_p2) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        empty_14_fu_86 <= data_conv_1_fu_201_p3;
    end else if (((1'b0 == ap_block_state4) & (1'd1 == and_ln27_reg_444) & (icmp_ln28_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_14_fu_86 <= empty_18_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_74 <= 31'd0;
    end else if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
        i_fu_74 <= i_2_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state4) & (1'd1 == and_ln27_reg_444) & (icmp_ln28_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_1_reg_115 <= add_ln28_fu_312_p2;
    end else if (((or_ln25_fu_228_p2 == 1'd1) & (1'd1 == and_ln27_fu_252_p2) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_1_reg_115 <= zext_ln28_fu_267_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        and_ln27_reg_444 <= and_ln27_fu_252_p2;
        data_conv_3_reg_434 <= data_conv_3_fu_216_p3;
        or_ln25_reg_440 <= or_ln25_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        blk_idx_2_reg_420 <= blk_idx_2_fu_179_p2;
        i_2_reg_403 <= i_2_fu_158_p2;
        icmp_ln21_1_reg_414 <= icmp_ln21_1_fu_173_p2;
        icmp_ln21_reg_408 <= icmp_ln21_fu_167_p2;
        icmp_ln25_1_reg_428 <= icmp_ln25_1_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
        empty_fu_78 <= data_conv_3_reg_434;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        n_read_reg_390 <= n;
        sub4_reg_395 <= sub4_fu_130_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_blk_stream_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((input_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_blk_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_153_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_blk_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_153_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln25_reg_440 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state4) & ((1'd0 == and_ln27_reg_444) | (icmp_ln28_fu_284_p2 == 1'd1))))) begin
        blk_stream_TDATA_blk_n = blk_stream_TREADY_int_regslice;
    end else begin
        blk_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (ap_predicate_op86_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        blk_stream_TVALID_int_regslice = 1'b1;
    end else begin
        blk_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_stream_TDATA_blk_n = input_stream_TVALID_int_regslice;
    end else begin
        input_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        input_stream_TREADY_int_regslice = 1'b1;
    end else begin
        input_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((regslice_both_blk_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_153_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_blk_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_153_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((or_ln25_fu_228_p2 == 1'd1) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((or_ln25_fu_228_p2 == 1'd0) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4) & ((1'd0 == and_ln27_reg_444) | (icmp_ln28_fu_284_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b0 == ap_block_state4) & (1'd1 == and_ln27_reg_444) & (icmp_ln28_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_312_p2 = (j_1_reg_115 + 64'd1);

assign and_ln27_fu_252_p2 = (icmp_ln27_fu_247_p2 & icmp_ln25_1_reg_428);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state4 = ((ap_predicate_op86_write_state4 == 1'b1) & (blk_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((or_ln25_reg_440 == 1'd1) & (blk_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_predicate_op86_write_state4 = ((1'd0 == and_ln27_reg_444) | (icmp_ln28_fu_284_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign blk_idx_2_fu_179_p2 = (blk_idx_fu_70 + 32'd1);

assign blk_stream_TDATA_int_regslice = {{{empty_14_fu_86}, {empty_13_fu_82}}, {data_conv_3_reg_434}};

assign blk_stream_TVALID = regslice_both_blk_stream_U_vld_out;

assign data_conv_1_fu_201_p3 = ((or_ln21_fu_197_p2[0:0] == 1'b1) ? empty_14_fu_86 : input_stream_TDATA_int_regslice);

assign data_conv_2_fu_209_p3 = ((icmp_ln21_1_reg_414[0:0] == 1'b1) ? input_stream_TDATA_int_regslice : empty_13_fu_82);

assign data_conv_3_fu_216_p3 = ((icmp_ln21_reg_408[0:0] == 1'b1) ? input_stream_TDATA_int_regslice : empty_fu_78);

assign empty_16_fu_290_p2 = ((j_1_reg_115 == 64'd1) ? 1'b1 : 1'b0);

assign empty_17_fu_296_p3 = ((empty_16_fu_290_p2[0:0] == 1'b1) ? 32'd0 : empty_13_fu_82);

assign empty_18_fu_304_p3 = ((empty_16_fu_290_p2[0:0] == 1'b1) ? empty_14_fu_86 : 32'd0);

assign i_2_fu_158_p2 = (i_fu_74 + 31'd1);

assign icmp_ln13_fu_153_p2 = (($signed(zext_ln13_fu_149_p1) < $signed(n_read_reg_390)) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_173_p2 = ((blk_idx_fu_70 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_167_p2 = ((blk_idx_fu_70 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_1_fu_185_p2 = ((zext_ln13_fu_149_p1 == sub4_reg_395) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_223_p2 = ((blk_idx_2_reg_420 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_247_p2 = (($signed(blk_idx_2_reg_420) < $signed(32'd3)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_284_p2 = ((trunc_ln28_fu_280_p1 == 32'd3) ? 1'b1 : 1'b0);

assign input_stream_TREADY = regslice_both_input_stream_V_data_V_U_ack_in;

assign or_ln21_fu_197_p2 = (icmp_ln21_reg_408 | icmp_ln21_1_reg_414);

assign or_ln25_fu_228_p2 = (icmp_ln25_fu_223_p2 | icmp_ln25_1_reg_428);

assign sub4_fu_130_p2 = ($signed(n) + $signed(32'd4294967295));

assign trunc_ln28_fu_280_p1 = j_1_reg_115[31:0];

assign zext_ln13_fu_149_p1 = i_fu_74;

assign zext_ln28_fu_267_p1 = blk_idx_2_reg_420;


reg find_kernel_block = 0;
// synthesis translate_off
`include "pack_stream_to_blk_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //pack_stream_to_blk

