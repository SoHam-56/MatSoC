// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module complex_mag_stream_complex_mag_stream_Pipeline_VITIS_LOOP_152_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_blk_0_2_load52_reload,
        out_blk_0_1_load45_reload,
        out_blk_0_0_load38_reload,
        last_block_size,
        zext_ln129,
        out_blk_0_2_load48_out,
        out_blk_0_2_load48_out_ap_vld,
        out_blk_0_1_load41_out,
        out_blk_0_1_load41_out_ap_vld,
        out_blk_0_0_load34_out,
        out_blk_0_0_load34_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] out_blk_0_2_load52_reload;
input  [31:0] out_blk_0_1_load45_reload;
input  [31:0] out_blk_0_0_load38_reload;
input  [2:0] last_block_size;
input  [2:0] zext_ln129;
output  [31:0] out_blk_0_2_load48_out;
output   out_blk_0_2_load48_out_ap_vld;
output  [31:0] out_blk_0_1_load41_out;
output   out_blk_0_1_load41_out_ap_vld;
output  [31:0] out_blk_0_0_load34_out;
output   out_blk_0_0_load34_out_ap_vld;

reg ap_idle;
reg out_blk_0_2_load48_out_ap_vld;
reg out_blk_0_1_load41_out_ap_vld;
reg out_blk_0_0_load34_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln152_fu_150_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] j_fu_52;
wire   [2:0] add_ln152_fu_175_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_1;
reg   [31:0] out_blk_0_0_load34_fu_56;
wire   [1:0] trunc_ln152_fu_156_p1;
reg   [31:0] out_blk_0_1_load41_fu_60;
reg   [31:0] out_blk_0_2_load48_fu_64;
wire  signed [2:0] sext_ln152_fu_146_p0;
wire  signed [3:0] sext_ln152_fu_146_p1;
wire   [3:0] zext_ln129_cast_fu_119_p1;
wire  signed [2:0] trunc_ln152_fu_156_p0;
wire  signed [2:0] add_ln152_fu_175_p0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_83;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 j_fu_52 = 3'd0;
#0 out_blk_0_0_load34_fu_56 = 32'd0;
#0 out_blk_0_1_load41_fu_60 = 32'd0;
#0 out_blk_0_2_load48_fu_64 = 32'd0;
#0 ap_done_reg = 1'b0;
end

complex_mag_stream_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln152_fu_150_p2 == 1'd0)) begin
            j_fu_52 <= add_ln152_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_52 <= last_block_size;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln152_fu_156_p1 == 2'd0) & (icmp_ln152_fu_150_p2 == 1'd0))) begin
            out_blk_0_0_load34_fu_56 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            out_blk_0_0_load34_fu_56 <= out_blk_0_0_load38_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((trunc_ln152_fu_156_p1 == 2'd1) & (icmp_ln152_fu_150_p2 == 1'd0))) begin
            out_blk_0_1_load41_fu_60 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            out_blk_0_1_load41_fu_60 <= out_blk_0_1_load45_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_83)) begin
            out_blk_0_2_load48_fu_64 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            out_blk_0_2_load48_fu_64 <= out_blk_0_2_load52_reload;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln152_fu_150_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_j_1 = last_block_size;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln152_fu_150_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_blk_0_0_load34_out_ap_vld = 1'b1;
    end else begin
        out_blk_0_0_load34_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln152_fu_150_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_blk_0_1_load41_out_ap_vld = 1'b1;
    end else begin
        out_blk_0_1_load41_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln152_fu_150_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_blk_0_2_load48_out_ap_vld = 1'b1;
    end else begin
        out_blk_0_2_load48_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln152_fu_175_p0 = ap_sig_allocacmp_j_1;

assign add_ln152_fu_175_p2 = ($signed(add_ln152_fu_175_p0) + $signed(3'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_83 = (~(trunc_ln152_fu_156_p1 == 2'd1) & ~(trunc_ln152_fu_156_p1 == 2'd0) & (icmp_ln152_fu_150_p2 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln152_fu_150_p2 = ((sext_ln152_fu_146_p1 == zext_ln129_cast_fu_119_p1) ? 1'b1 : 1'b0);

assign out_blk_0_0_load34_out = out_blk_0_0_load34_fu_56;

assign out_blk_0_1_load41_out = out_blk_0_1_load41_fu_60;

assign out_blk_0_2_load48_out = out_blk_0_2_load48_fu_64;

assign sext_ln152_fu_146_p0 = ap_sig_allocacmp_j_1;

assign sext_ln152_fu_146_p1 = sext_ln152_fu_146_p0;

assign trunc_ln152_fu_156_p0 = ap_sig_allocacmp_j_1;

assign trunc_ln152_fu_156_p1 = trunc_ln152_fu_156_p0[1:0];

assign zext_ln129_cast_fu_119_p1 = zext_ln129;

endmodule //complex_mag_stream_complex_mag_stream_Pipeline_VITIS_LOOP_152_3
