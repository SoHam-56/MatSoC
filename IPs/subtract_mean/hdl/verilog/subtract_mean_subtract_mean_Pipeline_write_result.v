// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module subtract_mean_subtract_mean_Pipeline_write_result (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_stream_TREADY,
        chunk_size_1,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        buffer_1_address0,
        buffer_1_ce0,
        buffer_1_q0,
        buffer_2_address0,
        buffer_2_ce0,
        buffer_2_q0,
        buffer_3_address0,
        buffer_3_ce0,
        buffer_3_q0,
        mean_val,
        sub63,
        icmp_ln44,
        output_stream_TDATA,
        output_stream_TVALID,
        output_stream_TKEEP,
        output_stream_TSTRB,
        output_stream_TLAST,
        grp_fu_197_p_din0,
        grp_fu_197_p_din1,
        grp_fu_197_p_opcode,
        grp_fu_197_p_dout0,
        grp_fu_197_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   output_stream_TREADY;
input  [31:0] chunk_size_1;
output  [7:0] buffer_r_address0;
output   buffer_r_ce0;
input  [31:0] buffer_r_q0;
output  [7:0] buffer_1_address0;
output   buffer_1_ce0;
input  [31:0] buffer_1_q0;
output  [7:0] buffer_2_address0;
output   buffer_2_ce0;
input  [31:0] buffer_2_q0;
output  [7:0] buffer_3_address0;
output   buffer_3_ce0;
input  [31:0] buffer_3_q0;
input  [31:0] mean_val;
input  [31:0] sub63;
input  [0:0] icmp_ln44;
output  [31:0] output_stream_TDATA;
output   output_stream_TVALID;
output  [3:0] output_stream_TKEEP;
output  [3:0] output_stream_TSTRB;
output  [0:0] output_stream_TLAST;
output  [31:0] grp_fu_197_p_din0;
output  [31:0] grp_fu_197_p_din1;
output  [0:0] grp_fu_197_p_opcode;
input  [31:0] grp_fu_197_p_dout0;
output   grp_fu_197_p_ce;

reg ap_idle;
reg output_stream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_198_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    output_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln55_fu_210_p1;
reg   [1:0] trunc_ln55_reg_292;
wire   [0:0] out_pkt_last_fu_238_p2;
reg   [0:0] out_pkt_last_reg_317;
reg   [0:0] out_pkt_last_reg_317_pp0_iter1_reg;
reg   [0:0] out_pkt_last_reg_317_pp0_iter2_reg;
reg   [0:0] out_pkt_last_reg_317_pp0_iter3_reg;
reg   [0:0] out_pkt_last_reg_317_pp0_iter4_reg;
reg   [0:0] out_pkt_last_reg_317_pp0_iter5_reg;
reg   [0:0] out_pkt_last_reg_317_pp0_iter6_reg;
wire   [31:0] tmp_fu_249_p11;
reg   [31:0] tmp_reg_322;
reg   [31:0] data_conv_reg_327;
wire   [63:0] zext_ln55_1_fu_224_p1;
wire    ap_block_pp0_stage0;
reg   [30:0] i_fu_84;
wire   [30:0] add_ln55_fu_204_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001_grp1;
reg    buffer_r_ce0_local;
reg    buffer_1_ce0_local;
reg    buffer_2_ce0_local;
reg    buffer_3_ce0_local;
wire   [31:0] zext_ln55_fu_194_p1;
wire   [7:0] lshr_ln2_fu_214_p4;
wire   [0:0] icmp_ln66_fu_232_p2;
wire   [31:0] tmp_fu_249_p9;
reg    ap_block_pp0_stage0_00001_grp1;
reg    grp_fu_182_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_fu_249_p1;
wire   [1:0] tmp_fu_249_p3;
wire  signed [1:0] tmp_fu_249_p5;
wire  signed [1:0] tmp_fu_249_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 i_fu_84 = 31'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) subtract_mean_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U22(
    .din0(buffer_r_q0),
    .din1(buffer_1_q0),
    .din2(buffer_2_q0),
    .din3(buffer_3_q0),
    .def(tmp_fu_249_p9),
    .sel(trunc_ln55_reg_292),
    .dout(tmp_fu_249_p11)
);

subtract_mean_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln55_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_84 <= add_ln55_fu_204_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_84 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        out_pkt_last_reg_317 <= out_pkt_last_fu_238_p2;
        out_pkt_last_reg_317_pp0_iter1_reg <= out_pkt_last_reg_317;
        tmp_reg_322 <= tmp_fu_249_p11;
        trunc_ln55_reg_292 <= trunc_ln55_fu_210_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        out_pkt_last_reg_317_pp0_iter2_reg <= out_pkt_last_reg_317_pp0_iter1_reg;
        out_pkt_last_reg_317_pp0_iter3_reg <= out_pkt_last_reg_317_pp0_iter2_reg;
        out_pkt_last_reg_317_pp0_iter4_reg <= out_pkt_last_reg_317_pp0_iter3_reg;
        out_pkt_last_reg_317_pp0_iter5_reg <= out_pkt_last_reg_317_pp0_iter4_reg;
        out_pkt_last_reg_317_pp0_iter6_reg <= out_pkt_last_reg_317_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        data_conv_reg_327 <= grp_fu_197_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_198_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_1_ce0_local = 1'b1;
    end else begin
        buffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_2_ce0_local = 1'b1;
    end else begin
        buffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_3_ce0_local = 1'b1;
    end else begin
        buffer_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_r_ce0_local = 1'b1;
    end else begin
        buffer_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_182_ce = 1'b1;
    end else begin
        grp_fu_182_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        output_stream_TDATA_blk_n = output_stream_TREADY;
    end else begin
        output_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        output_stream_TVALID = 1'b1;
    end else begin
        output_stream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_204_p2 = (ap_sig_allocacmp_i_1 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001_grp1 = ((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((output_stream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign buffer_1_address0 = zext_ln55_1_fu_224_p1;

assign buffer_1_ce0 = buffer_1_ce0_local;

assign buffer_2_address0 = zext_ln55_1_fu_224_p1;

assign buffer_2_ce0 = buffer_2_ce0_local;

assign buffer_3_address0 = zext_ln55_1_fu_224_p1;

assign buffer_3_ce0 = buffer_3_ce0_local;

assign buffer_r_address0 = zext_ln55_1_fu_224_p1;

assign buffer_r_ce0 = buffer_r_ce0_local;

assign grp_fu_197_p_ce = grp_fu_182_ce;

assign grp_fu_197_p_din0 = tmp_reg_322;

assign grp_fu_197_p_din1 = mean_val;

assign grp_fu_197_p_opcode = 2'd1;

assign icmp_ln55_fu_198_p2 = (($signed(zext_ln55_fu_194_p1) < $signed(chunk_size_1)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_232_p2 = ((zext_ln55_fu_194_p1 == sub63) ? 1'b1 : 1'b0);

assign lshr_ln2_fu_214_p4 = {{ap_sig_allocacmp_i_1[9:2]}};

assign out_pkt_last_fu_238_p2 = (icmp_ln66_fu_232_p2 & icmp_ln44);

assign output_stream_TDATA = data_conv_reg_327;

assign output_stream_TKEEP = 4'd15;

assign output_stream_TLAST = out_pkt_last_reg_317_pp0_iter6_reg;

assign output_stream_TSTRB = 4'd15;

assign tmp_fu_249_p9 = 'bx;

assign trunc_ln55_fu_210_p1 = ap_sig_allocacmp_i_1[1:0];

assign zext_ln55_1_fu_224_p1 = lshr_ln2_fu_214_p4;

assign zext_ln55_fu_194_p1 = ap_sig_allocacmp_i_1;

endmodule //subtract_mean_subtract_mean_Pipeline_write_result
