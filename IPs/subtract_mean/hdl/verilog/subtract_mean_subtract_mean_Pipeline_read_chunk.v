// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module subtract_mean_subtract_mean_Pipeline_read_chunk (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_stream_TVALID,
        chunk_size,
        buffer_3_address0,
        buffer_3_ce0,
        buffer_3_we0,
        buffer_3_d0,
        buffer_2_address0,
        buffer_2_ce0,
        buffer_2_we0,
        buffer_2_d0,
        buffer_1_address0,
        buffer_1_ce0,
        buffer_1_we0,
        buffer_1_d0,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        input_stream_TDATA,
        input_stream_TREADY,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TLAST,
        chunk_sum_out,
        chunk_sum_out_ap_vld,
        grp_fu_197_p_din0,
        grp_fu_197_p_din1,
        grp_fu_197_p_opcode,
        grp_fu_197_p_dout0,
        grp_fu_197_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   input_stream_TVALID;
input  [31:0] chunk_size;
output  [7:0] buffer_3_address0;
output   buffer_3_ce0;
output   buffer_3_we0;
output  [31:0] buffer_3_d0;
output  [7:0] buffer_2_address0;
output   buffer_2_ce0;
output   buffer_2_we0;
output  [31:0] buffer_2_d0;
output  [7:0] buffer_1_address0;
output   buffer_1_ce0;
output   buffer_1_we0;
output  [31:0] buffer_1_d0;
output  [7:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
input  [31:0] input_stream_TDATA;
output   input_stream_TREADY;
input  [3:0] input_stream_TKEEP;
input  [3:0] input_stream_TSTRB;
input  [0:0] input_stream_TLAST;
output  [31:0] chunk_sum_out;
output   chunk_sum_out_ap_vld;
output  [31:0] grp_fu_197_p_din0;
output  [31:0] grp_fu_197_p_din1;
output  [0:0] grp_fu_197_p_opcode;
input  [31:0] grp_fu_197_p_dout0;
output   grp_fu_197_p_ce;

reg ap_idle;
reg input_stream_TREADY;
reg chunk_sum_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln25_reg_259;
reg    ap_block_state2_pp0_stage1_iter0_grp1;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_subdone;
reg    input_stream_TDATA_blk_n;
wire    ap_block_pp0_stage1_grp1;
wire    ap_block_pp0_stage0_11001;
reg   [30:0] i_2_reg_252;
wire   [0:0] icmp_ln25_fu_178_p2;
wire   [30:0] add_ln25_fu_184_p2;
reg   [30:0] add_ln25_reg_263;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
wire   [31:0] bitcast_ln29_fu_213_p1;
reg   [31:0] bitcast_ln29_reg_271;
reg    ap_block_pp0_stage1_11001_grp1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] chunk_sum_1_reg_281;
wire   [63:0] zext_ln24_fu_201_p1;
reg   [31:0] chunk_sum_fu_72;
wire    ap_block_pp0_stage1_grp0;
wire    ap_loop_init;
wire    ap_block_pp0_stage2;
reg   [30:0] i_fu_76;
reg   [30:0] ap_sig_allocacmp_i_2;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1_01001_grp0;
reg    buffer_2_we0_local;
wire   [1:0] trunc_ln25_fu_189_p1;
reg    buffer_2_ce0_local;
reg    buffer_1_we0_local;
reg    buffer_1_ce0_local;
reg    buffer_r_we0_local;
reg    buffer_r_ce0_local;
reg    buffer_3_we0_local;
reg    buffer_3_ce0_local;
wire   [31:0] zext_ln25_fu_174_p1;
wire   [7:0] lshr_ln_fu_192_p4;
wire    ap_block_pp0_stage2_00001;
reg    grp_fu_157_ce;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage5_11001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 chunk_sum_fu_72 = 32'd0;
#0 i_fu_76 = 31'd0;
#0 ap_done_reg = 1'b0;
end

subtract_mean_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        chunk_sum_fu_72 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        chunk_sum_fu_72 <= chunk_sum_1_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_76 <= 31'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (icmp_ln25_reg_259 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        i_fu_76 <= add_ln25_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln25_reg_263 <= add_ln25_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bitcast_ln29_reg_271 <= bitcast_ln29_fu_213_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        chunk_sum_1_reg_281 <= grp_fu_197_p_dout0;
        i_2_reg_252 <= ap_sig_allocacmp_i_2;
        icmp_ln25_reg_259 <= icmp_ln25_fu_178_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (icmp_ln25_reg_259 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_1_ce0_local = 1'b1;
    end else begin
        buffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (icmp_ln25_reg_259 == 1'd1) & (trunc_ln25_fu_189_p1 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_1_we0_local = 1'b1;
    end else begin
        buffer_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_2_ce0_local = 1'b1;
    end else begin
        buffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (icmp_ln25_reg_259 == 1'd1) & (trunc_ln25_fu_189_p1 == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_2_we0_local = 1'b1;
    end else begin
        buffer_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_3_ce0_local = 1'b1;
    end else begin
        buffer_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (icmp_ln25_reg_259 == 1'd1) & (trunc_ln25_fu_189_p1 == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_3_we0_local = 1'b1;
    end else begin
        buffer_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_r_ce0_local = 1'b1;
    end else begin
        buffer_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (icmp_ln25_reg_259 == 1'd1) & (trunc_ln25_fu_189_p1 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buffer_r_we0_local = 1'b1;
    end else begin
        buffer_r_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (icmp_ln25_reg_259 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        chunk_sum_out_ap_vld = 1'b1;
    end else begin
        chunk_sum_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_157_ce = 1'b1;
    end else begin
        grp_fu_157_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (icmp_ln25_reg_259 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_stream_TDATA_blk_n = input_stream_TVALID;
    end else begin
        input_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (icmp_ln25_reg_259 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_stream_TREADY = 1'b1;
    end else begin
        input_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_184_p2 = (i_2_reg_252 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0_grp1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_grp1 = ((icmp_ln25_reg_259 == 1'd1) & (input_stream_TVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign bitcast_ln29_fu_213_p1 = input_stream_TDATA;

assign buffer_1_address0 = zext_ln24_fu_201_p1;

assign buffer_1_ce0 = buffer_1_ce0_local;

assign buffer_1_d0 = bitcast_ln29_fu_213_p1;

assign buffer_1_we0 = buffer_1_we0_local;

assign buffer_2_address0 = zext_ln24_fu_201_p1;

assign buffer_2_ce0 = buffer_2_ce0_local;

assign buffer_2_d0 = bitcast_ln29_fu_213_p1;

assign buffer_2_we0 = buffer_2_we0_local;

assign buffer_3_address0 = zext_ln24_fu_201_p1;

assign buffer_3_ce0 = buffer_3_ce0_local;

assign buffer_3_d0 = bitcast_ln29_fu_213_p1;

assign buffer_3_we0 = buffer_3_we0_local;

assign buffer_r_address0 = zext_ln24_fu_201_p1;

assign buffer_r_ce0 = buffer_r_ce0_local;

assign buffer_r_d0 = bitcast_ln29_fu_213_p1;

assign buffer_r_we0 = buffer_r_we0_local;

assign chunk_sum_out = chunk_sum_fu_72;

assign grp_fu_197_p_ce = grp_fu_157_ce;

assign grp_fu_197_p_din0 = chunk_sum_fu_72;

assign grp_fu_197_p_din1 = bitcast_ln29_reg_271;

assign grp_fu_197_p_opcode = 2'd0;

assign icmp_ln25_fu_178_p2 = (($signed(zext_ln25_fu_174_p1) < $signed(chunk_size)) ? 1'b1 : 1'b0);

assign lshr_ln_fu_192_p4 = {{i_2_reg_252[9:2]}};

assign trunc_ln25_fu_189_p1 = i_2_reg_252[1:0];

assign zext_ln24_fu_201_p1 = lshr_ln_fu_192_p4;

assign zext_ln25_fu_174_p1 = ap_sig_allocacmp_i_2;

endmodule //subtract_mean_subtract_mean_Pipeline_read_chunk
