-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subtract_mean_subtract_mean_Pipeline_write_result is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC;
    chunk_size_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_1_ce0 : OUT STD_LOGIC;
    buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_2_ce0 : OUT STD_LOGIC;
    buffer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_3_ce0 : OUT STD_LOGIC;
    buffer_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mean_val : IN STD_LOGIC_VECTOR (31 downto 0);
    sub63 : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln44 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_197_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_197_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_197_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_197_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_197_p_ce : OUT STD_LOGIC );
end;


architecture behav of subtract_mean_subtract_mean_Pipeline_write_result is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln55_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal output_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln55_fu_210_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln55_reg_292 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_pkt_last_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pkt_last_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pkt_last_reg_317_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pkt_last_reg_317_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pkt_last_reg_317_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pkt_last_reg_317_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pkt_last_reg_317_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pkt_last_reg_317_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_249_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_conv_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln55_1_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_84 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln55_fu_204_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal buffer_r_ce0_local : STD_LOGIC;
    signal buffer_1_ce0_local : STD_LOGIC;
    signal buffer_2_ce0_local : STD_LOGIC;
    signal buffer_3_ce0_local : STD_LOGIC;
    signal zext_ln55_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln2_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln66_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_249_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001_grp1 : BOOLEAN;
    signal grp_fu_182_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_249_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_249_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_249_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_249_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component subtract_mean_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component subtract_mean_sparsemux_9_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component subtract_mean_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_32_1_1_U22 : component subtract_mean_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => buffer_r_q0,
        din1 => buffer_1_q0,
        din2 => buffer_2_q0,
        din3 => buffer_3_q0,
        def => tmp_fu_249_p9,
        sel => trunc_ln55_reg_292,
        dout => tmp_fu_249_p11);

    flow_control_loop_pipe_sequential_init_U : component subtract_mean_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln55_fu_198_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_84 <= add_ln55_fu_204_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_84 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                out_pkt_last_reg_317 <= out_pkt_last_fu_238_p2;
                out_pkt_last_reg_317_pp0_iter1_reg <= out_pkt_last_reg_317;
                tmp_reg_322 <= tmp_fu_249_p11;
                trunc_ln55_reg_292 <= trunc_ln55_fu_210_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                out_pkt_last_reg_317_pp0_iter2_reg <= out_pkt_last_reg_317_pp0_iter1_reg;
                out_pkt_last_reg_317_pp0_iter3_reg <= out_pkt_last_reg_317_pp0_iter2_reg;
                out_pkt_last_reg_317_pp0_iter4_reg <= out_pkt_last_reg_317_pp0_iter3_reg;
                out_pkt_last_reg_317_pp0_iter5_reg <= out_pkt_last_reg_317_pp0_iter4_reg;
                out_pkt_last_reg_317_pp0_iter6_reg <= out_pkt_last_reg_317_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                data_conv_reg_327 <= grp_fu_197_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln55_fu_204_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_grp1_assign_proc : process(ap_enable_reg_pp0_iter7, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_00001_grp1 <= ((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter7, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter7, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter7, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter7, output_stream_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((output_stream_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln55_fu_198_p2)
    begin
        if (((icmp_ln55_fu_198_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_84;
        end if; 
    end process;

    buffer_1_address0 <= zext_ln55_1_fu_224_p1(8 - 1 downto 0);
    buffer_1_ce0 <= buffer_1_ce0_local;

    buffer_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_1_ce0_local <= ap_const_logic_1;
        else 
            buffer_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_address0 <= zext_ln55_1_fu_224_p1(8 - 1 downto 0);
    buffer_2_ce0 <= buffer_2_ce0_local;

    buffer_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_2_ce0_local <= ap_const_logic_1;
        else 
            buffer_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_address0 <= zext_ln55_1_fu_224_p1(8 - 1 downto 0);
    buffer_3_ce0 <= buffer_3_ce0_local;

    buffer_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_3_ce0_local <= ap_const_logic_1;
        else 
            buffer_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= zext_ln55_1_fu_224_p1(8 - 1 downto 0);
    buffer_r_ce0 <= buffer_r_ce0_local;

    buffer_r_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_r_ce0_local <= ap_const_logic_1;
        else 
            buffer_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_182_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_182_ce <= ap_const_logic_1;
        else 
            grp_fu_182_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_197_p_ce <= grp_fu_182_ce;
    grp_fu_197_p_din0 <= tmp_reg_322;
    grp_fu_197_p_din1 <= mean_val;
    grp_fu_197_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    icmp_ln55_fu_198_p2 <= "1" when (signed(zext_ln55_fu_194_p1) < signed(chunk_size_1)) else "0";
    icmp_ln66_fu_232_p2 <= "1" when (zext_ln55_fu_194_p1 = sub63) else "0";
    lshr_ln2_fu_214_p4 <= ap_sig_allocacmp_i_1(9 downto 2);
    out_pkt_last_fu_238_p2 <= (icmp_ln66_fu_232_p2 and icmp_ln44);
    output_stream_TDATA <= data_conv_reg_327;

    output_stream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter7, output_stream_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            output_stream_TDATA_blk_n <= output_stream_TREADY;
        else 
            output_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_stream_TKEEP <= ap_const_lv4_F;
    output_stream_TLAST <= out_pkt_last_reg_317_pp0_iter6_reg;
    output_stream_TSTRB <= ap_const_lv4_F;

    output_stream_TVALID_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            output_stream_TVALID <= ap_const_logic_1;
        else 
            output_stream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_249_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln55_fu_210_p1 <= ap_sig_allocacmp_i_1(2 - 1 downto 0);
    zext_ln55_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_214_p4),64));
    zext_ln55_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
end behav;
