-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subtract_mean_subtract_mean_Pipeline_read_chunk is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_stream_TVALID : IN STD_LOGIC;
    chunk_size : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_3_ce0 : OUT STD_LOGIC;
    buffer_3_we0 : OUT STD_LOGIC;
    buffer_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_2_ce0 : OUT STD_LOGIC;
    buffer_2_we0 : OUT STD_LOGIC;
    buffer_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_1_ce0 : OUT STD_LOGIC;
    buffer_1_we0 : OUT STD_LOGIC;
    buffer_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_stream_TREADY : OUT STD_LOGIC;
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    chunk_sum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    chunk_sum_out_ap_vld : OUT STD_LOGIC;
    grp_fu_197_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_197_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_197_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_197_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_197_p_ce : OUT STD_LOGIC );
end;


architecture behav of subtract_mean_subtract_mean_Pipeline_read_chunk is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln25_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0_grp1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal input_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_252 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln25_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_184_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_reg_263 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage1_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp0 : BOOLEAN;
    signal bitcast_ln29_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001_grp1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal chunk_sum_1_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal chunk_sum_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage1_grp0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal i_fu_76 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp0 : BOOLEAN;
    signal buffer_2_we0_local : STD_LOGIC;
    signal trunc_ln25_fu_189_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_2_ce0_local : STD_LOGIC;
    signal buffer_1_we0_local : STD_LOGIC;
    signal buffer_1_ce0_local : STD_LOGIC;
    signal buffer_r_we0_local : STD_LOGIC;
    signal buffer_r_ce0_local : STD_LOGIC;
    signal buffer_3_we0_local : STD_LOGIC;
    signal buffer_3_ce0_local : STD_LOGIC;
    signal zext_ln25_fu_174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_192_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal grp_fu_157_ce : STD_LOGIC;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component subtract_mean_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component subtract_mean_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component subtract_mean_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    chunk_sum_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                chunk_sum_fu_72 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                chunk_sum_fu_72 <= chunk_sum_1_reg_281;
            end if; 
        end if;
    end process;

    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_76 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln25_reg_259 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                i_fu_76 <= add_ln25_reg_263;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln25_reg_263 <= add_ln25_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                bitcast_ln29_reg_271 <= bitcast_ln29_fu_213_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                chunk_sum_1_reg_281 <= grp_fu_197_p_dout0;
                i_2_reg_252 <= ap_sig_allocacmp_i_2;
                icmp_ln25_reg_259 <= icmp_ln25_fu_178_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln25_fu_184_p2 <= std_logic_vector(unsigned(i_2_reg_252) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_grp1_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp1, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_11001_grp1 <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1));
    end process;

        ap_block_pp0_stage1_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_block_state2_pp0_stage1_iter0_grp1, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0_grp1));
    end process;

        ap_block_pp0_stage1_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_grp1_assign_proc : process(input_stream_TVALID, icmp_ln25_reg_259)
    begin
                ap_block_state2_pp0_stage1_iter0_grp1 <= ((icmp_ln25_reg_259 = ap_const_lv1_1) and (input_stream_TVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln25_reg_259, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln25_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, i_fu_76, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_76;
        end if; 
    end process;

    bitcast_ln29_fu_213_p1 <= input_stream_TDATA;
    buffer_1_address0 <= zext_ln24_fu_201_p1(8 - 1 downto 0);
    buffer_1_ce0 <= buffer_1_ce0_local;

    buffer_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buffer_1_ce0_local <= ap_const_logic_1;
        else 
            buffer_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_d0 <= bitcast_ln29_fu_213_p1;
    buffer_1_we0 <= buffer_1_we0_local;

    buffer_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln25_reg_259, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1, trunc_ln25_fu_189_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln25_reg_259 = ap_const_lv1_1) and (trunc_ln25_fu_189_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buffer_1_we0_local <= ap_const_logic_1;
        else 
            buffer_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_address0 <= zext_ln24_fu_201_p1(8 - 1 downto 0);
    buffer_2_ce0 <= buffer_2_ce0_local;

    buffer_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buffer_2_ce0_local <= ap_const_logic_1;
        else 
            buffer_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_2_d0 <= bitcast_ln29_fu_213_p1;
    buffer_2_we0 <= buffer_2_we0_local;

    buffer_2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln25_reg_259, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1, trunc_ln25_fu_189_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln25_reg_259 = ap_const_lv1_1) and (trunc_ln25_fu_189_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buffer_2_we0_local <= ap_const_logic_1;
        else 
            buffer_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_address0 <= zext_ln24_fu_201_p1(8 - 1 downto 0);
    buffer_3_ce0 <= buffer_3_ce0_local;

    buffer_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buffer_3_ce0_local <= ap_const_logic_1;
        else 
            buffer_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_3_d0 <= bitcast_ln29_fu_213_p1;
    buffer_3_we0 <= buffer_3_we0_local;

    buffer_3_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln25_reg_259, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1, trunc_ln25_fu_189_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln25_reg_259 = ap_const_lv1_1) and (trunc_ln25_fu_189_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buffer_3_we0_local <= ap_const_logic_1;
        else 
            buffer_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= zext_ln24_fu_201_p1(8 - 1 downto 0);
    buffer_r_ce0 <= buffer_r_ce0_local;

    buffer_r_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buffer_r_ce0_local <= ap_const_logic_1;
        else 
            buffer_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_d0 <= bitcast_ln29_fu_213_p1;
    buffer_r_we0 <= buffer_r_we0_local;

    buffer_r_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln25_reg_259, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1, trunc_ln25_fu_189_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln25_reg_259 = ap_const_lv1_1) and (trunc_ln25_fu_189_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buffer_r_we0_local <= ap_const_logic_1;
        else 
            buffer_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    chunk_sum_out <= chunk_sum_fu_72;

    chunk_sum_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln25_reg_259, ap_loop_exit_ready, ap_block_pp0_stage1_11001_grp0, ap_block_pp0_stage1_subdone_grp0_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (icmp_ln25_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            chunk_sum_out_ap_vld <= ap_const_logic_1;
        else 
            chunk_sum_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_157_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_157_ce <= ap_const_logic_1;
        else 
            grp_fu_157_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_197_p_ce <= grp_fu_157_ce;
    grp_fu_197_p_din0 <= chunk_sum_fu_72;
    grp_fu_197_p_din1 <= bitcast_ln29_reg_271;
    grp_fu_197_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    icmp_ln25_fu_178_p2 <= "1" when (signed(zext_ln25_fu_174_p1) < signed(chunk_size)) else "0";

    input_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, input_stream_TVALID, icmp_ln25_reg_259, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln25_reg_259 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_stream_TDATA_blk_n <= input_stream_TVALID;
        else 
            input_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_stream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln25_reg_259, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln25_reg_259 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_stream_TREADY <= ap_const_logic_1;
        else 
            input_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_192_p4 <= i_2_reg_252(9 downto 2);
    trunc_ln25_fu_189_p1 <= i_2_reg_252(2 - 1 downto 0);
    zext_ln24_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_192_p4),64));
    zext_ln25_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),32));
end behav;
