-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity auto_parkcalc is
generic (
    C_S_AXI_AXICTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXICTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_ROW_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    A_ROW_TVALID : IN STD_LOGIC;
    A_ROW_TREADY : OUT STD_LOGIC;
    ID_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
    ID_TVALID : OUT STD_LOGIC;
    ID_TREADY : IN STD_LOGIC;
    IQ_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
    IQ_TVALID : OUT STD_LOGIC;
    IQ_TREADY : IN STD_LOGIC;
    s_axi_AXICTRL_AWVALID : IN STD_LOGIC;
    s_axi_AXICTRL_AWREADY : OUT STD_LOGIC;
    s_axi_AXICTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXICTRL_ADDR_WIDTH-1 downto 0);
    s_axi_AXICTRL_WVALID : IN STD_LOGIC;
    s_axi_AXICTRL_WREADY : OUT STD_LOGIC;
    s_axi_AXICTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXICTRL_DATA_WIDTH-1 downto 0);
    s_axi_AXICTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXICTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_AXICTRL_ARVALID : IN STD_LOGIC;
    s_axi_AXICTRL_ARREADY : OUT STD_LOGIC;
    s_axi_AXICTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXICTRL_ADDR_WIDTH-1 downto 0);
    s_axi_AXICTRL_RVALID : OUT STD_LOGIC;
    s_axi_AXICTRL_RREADY : IN STD_LOGIC;
    s_axi_AXICTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXICTRL_DATA_WIDTH-1 downto 0);
    s_axi_AXICTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXICTRL_BVALID : OUT STD_LOGIC;
    s_axi_AXICTRL_BREADY : IN STD_LOGIC;
    s_axi_AXICTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of auto_parkcalc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "auto_parkcalc_auto_parkcalc,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1073741848,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4728,HLS_SYN_LUT=5738,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv65_155555556 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_77_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln50_reg_163 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_7_cast_reg_168 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln50_fu_131_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln50_reg_173 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln50_1_fu_135_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln50_1_reg_178 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln50_1_fu_141_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln50_1_reg_183 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_done : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_idle : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_ready : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TREADY : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TREADY : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_A_ROW_TREADY : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TDATA : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TVALID : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TDATA : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TVALID : STD_LOGIC;
    signal grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ID_TDATA_reg : STD_LOGIC_VECTOR (95 downto 0);
    signal IQ_TDATA_reg : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_77_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln50_fu_110_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_6_cast_fu_115_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln50_fu_125_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal regslice_both_ID_U_apdone_blk : STD_LOGIC;
    signal regslice_both_IQ_U_apdone_blk : STD_LOGIC;
    signal ap_block_state7 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal regslice_both_A_ROW_U_apdone_blk : STD_LOGIC;
    signal A_ROW_TDATA_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal A_ROW_TVALID_int_regslice : STD_LOGIC;
    signal A_ROW_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_A_ROW_U_ack_in : STD_LOGIC;
    signal ID_TDATA_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal ID_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_ID_U_vld_out : STD_LOGIC;
    signal IQ_TDATA_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal IQ_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_IQ_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component auto_parkcalc_auto_parkcalc_Pipeline_VITIS_LOOP_51_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_ROW_TVALID : IN STD_LOGIC;
        ID_TREADY : IN STD_LOGIC;
        IQ_TREADY : IN STD_LOGIC;
        select_ln50_1 : IN STD_LOGIC_VECTOR (30 downto 0);
        A_ROW_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
        A_ROW_TREADY : OUT STD_LOGIC;
        ID_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
        ID_TVALID : OUT STD_LOGIC;
        IQ_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
        IQ_TVALID : OUT STD_LOGIC );
    end component;


    component auto_parkcalc_mul_32s_34ns_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component auto_parkcalc_AXICTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component auto_parkcalc_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66 : component auto_parkcalc_auto_parkcalc_Pipeline_VITIS_LOOP_51_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start,
        ap_done => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_done,
        ap_idle => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_idle,
        ap_ready => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_ready,
        A_ROW_TVALID => A_ROW_TVALID_int_regslice,
        ID_TREADY => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TREADY,
        IQ_TREADY => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TREADY,
        select_ln50_1 => select_ln50_1_reg_183,
        A_ROW_TDATA => A_ROW_TDATA_int_regslice,
        A_ROW_TREADY => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_A_ROW_TREADY,
        ID_TDATA => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TDATA,
        ID_TVALID => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TVALID,
        IQ_TDATA => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TDATA,
        IQ_TVALID => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TVALID);

    AXICTRL_s_axi_U : component auto_parkcalc_AXICTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXICTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXICTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXICTRL_AWVALID,
        AWREADY => s_axi_AXICTRL_AWREADY,
        AWADDR => s_axi_AXICTRL_AWADDR,
        WVALID => s_axi_AXICTRL_WVALID,
        WREADY => s_axi_AXICTRL_WREADY,
        WDATA => s_axi_AXICTRL_WDATA,
        WSTRB => s_axi_AXICTRL_WSTRB,
        ARVALID => s_axi_AXICTRL_ARVALID,
        ARREADY => s_axi_AXICTRL_ARREADY,
        ARADDR => s_axi_AXICTRL_ARADDR,
        RVALID => s_axi_AXICTRL_RVALID,
        RREADY => s_axi_AXICTRL_RREADY,
        RDATA => s_axi_AXICTRL_RDATA,
        RRESP => s_axi_AXICTRL_RRESP,
        BVALID => s_axi_AXICTRL_BVALID,
        BREADY => s_axi_AXICTRL_BREADY,
        BRESP => s_axi_AXICTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        size => size,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_32s_34ns_65_2_1_U19 : component auto_parkcalc_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add_ln50_reg_147,
        din1 => grp_fu_77_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_77_p2);

    regslice_both_A_ROW_U : component auto_parkcalc_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_ROW_TDATA,
        vld_in => A_ROW_TVALID,
        ack_in => regslice_both_A_ROW_U_ack_in,
        data_out => A_ROW_TDATA_int_regslice,
        vld_out => A_ROW_TVALID_int_regslice,
        ack_out => A_ROW_TREADY_int_regslice,
        apdone_blk => regslice_both_A_ROW_U_apdone_blk);

    regslice_both_ID_U : component auto_parkcalc_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ID_TDATA_int_regslice,
        vld_in => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TVALID,
        ack_in => ID_TREADY_int_regslice,
        data_out => ID_TDATA,
        vld_out => regslice_both_ID_U_vld_out,
        ack_out => ID_TREADY,
        apdone_blk => regslice_both_ID_U_apdone_blk);

    regslice_both_IQ_U : component auto_parkcalc_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => IQ_TDATA_int_regslice,
        vld_in => grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TVALID,
        ack_in => IQ_TREADY_int_regslice,
        data_out => IQ_TDATA,
        vld_out => regslice_both_IQ_U_vld_out,
        ack_out => IQ_TREADY,
        apdone_blk => regslice_both_IQ_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_ready = ap_const_logic_1)) then 
                    grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                ID_TDATA_reg <= grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                IQ_TDATA_reg <= grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln50_reg_147 <= add_ln50_fu_82_p2;
                tmp_reg_152 <= add_ln50_fu_82_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln50_reg_163 <= grp_fu_77_p2;
                tmp_7_cast_reg_168 <= grp_fu_77_p2(63 downto 34);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln50_1_reg_183 <= select_ln50_1_fu_141_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sub_ln50_1_reg_178 <= sub_ln50_1_fu_135_p2;
                    zext_ln50_reg_173(29 downto 0) <= zext_ln50_fu_131_p1(29 downto 0);
            end if;
        end if;
    end process;
    zext_ln50_reg_173(30) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_block_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    A_ROW_TREADY <= regslice_both_A_ROW_U_ack_in;

    A_ROW_TREADY_int_regslice_assign_proc : process(grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_A_ROW_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ROW_TREADY_int_regslice <= grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_A_ROW_TREADY;
        else 
            A_ROW_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    ID_TDATA_int_regslice_assign_proc : process(grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TDATA, grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TVALID, ap_CS_fsm_state6, ID_TDATA_reg)
    begin
        if (((grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ID_TDATA_int_regslice <= grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TDATA;
        else 
            ID_TDATA_int_regslice <= ID_TDATA_reg;
        end if; 
    end process;

    ID_TVALID <= regslice_both_ID_U_vld_out;

    IQ_TDATA_int_regslice_assign_proc : process(grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TDATA, grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TVALID, ap_CS_fsm_state6, IQ_TDATA_reg)
    begin
        if (((grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            IQ_TDATA_int_regslice <= grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TDATA;
        else 
            IQ_TDATA_int_regslice <= IQ_TDATA_reg;
        end if; 
    end process;

    IQ_TVALID <= regslice_both_IQ_U_vld_out;
    add_ln50_fu_82_p2 <= std_logic_vector(unsigned(size) + unsigned(ap_const_lv32_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_done)
    begin
        if ((grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_block_state7)
    begin
        if ((ap_const_boolean_1 = ap_block_state7)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state7_assign_proc : process(regslice_both_ID_U_apdone_blk, regslice_both_IQ_U_apdone_blk)
    begin
                ap_block_state7 <= ((regslice_both_IQ_U_apdone_blk = ap_const_logic_1) or (regslice_both_ID_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, ap_block_state7)
    begin
        if (((ap_const_boolean_0 = ap_block_state7) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, ap_block_state7)
    begin
        if (((ap_const_boolean_0 = ap_block_state7) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ID_TREADY <= (ap_CS_fsm_state6 and ID_TREADY_int_regslice);
    grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_IQ_TREADY <= (ap_CS_fsm_state6 and IQ_TREADY_int_regslice);
    grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start <= grp_auto_parkcalc_Pipeline_VITIS_LOOP_51_1_fu_66_ap_start_reg;
    grp_fu_77_p1 <= ap_const_lv65_155555556(34 - 1 downto 0);
    select_ln50_1_fu_141_p3 <= 
        sub_ln50_1_reg_178 when (tmp_reg_152(0) = '1') else 
        zext_ln50_reg_173;
    select_ln50_fu_125_p3 <= 
        tmp_6_cast_fu_115_p4 when (tmp_reg_152(0) = '1') else 
        tmp_7_cast_reg_168;
    sub_ln50_1_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln50_fu_131_p1));
    sub_ln50_fu_110_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln50_reg_163));
    tmp_6_cast_fu_115_p4 <= sub_ln50_fu_110_p2(63 downto 34);
    zext_ln50_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln50_fu_125_p3),31));
end behav;
