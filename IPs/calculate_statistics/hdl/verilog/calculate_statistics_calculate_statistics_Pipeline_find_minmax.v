// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module calculate_statistics_calculate_statistics_Pipeline_find_minmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        min_val_3,
        n,
        data_address0,
        data_ce0,
        data_q0,
        data_1_address0,
        data_1_ce0,
        data_1_q0,
        data_2_address0,
        data_2_ce0,
        data_2_q0,
        data_3_address0,
        data_3_ce0,
        data_3_q0,
        min_val_2_out,
        min_val_2_out_ap_vld,
        max_val_2_out,
        max_val_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] min_val_3;
input  [31:0] n;
output  [7:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;
output  [7:0] data_1_address0;
output   data_1_ce0;
input  [31:0] data_1_q0;
output  [7:0] data_2_address0;
output   data_2_ce0;
input  [31:0] data_2_q0;
output  [7:0] data_3_address0;
output   data_3_ce0;
input  [31:0] data_3_q0;
output  [31:0] min_val_2_out;
output   min_val_2_out_ap_vld;
output  [31:0] max_val_2_out;
output   max_val_2_out_ap_vld;

reg ap_idle;
reg min_val_2_out_ap_vld;
reg max_val_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln113_reg_438;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [30:0] i_3_reg_432;
wire   [0:0] icmp_ln113_fu_184_p2;
reg   [0:0] icmp_ln113_reg_438_pp0_iter1_reg;
wire   [31:0] y_assign_fu_211_p11;
reg   [31:0] y_assign_reg_462;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] y_assign_reg_462_pp0_iter1_reg;
reg   [31:0] min_val_2_load_1_reg_470;
reg   [31:0] max_val_2_load_1_reg_477;
wire   [0:0] or_ln247_1_fu_317_p2;
reg   [0:0] or_ln247_1_reg_484;
wire   [31:0] min_val_fu_335_p3;
reg   [31:0] min_val_reg_489;
wire   [31:0] max_val_fu_387_p3;
reg   [31:0] max_val_reg_494;
wire   [63:0] zext_ln113_1_fu_200_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] max_val_2_fu_68;
reg   [31:0] ap_sig_allocacmp_max_val_2_load_1;
wire    ap_block_pp0_stage1;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [31:0] min_val_2_fu_72;
reg   [31:0] ap_sig_allocacmp_min_val_2_load_1;
reg   [30:0] i_fu_76;
wire   [30:0] add_ln113_fu_235_p2;
reg   [30:0] ap_sig_allocacmp_i_3;
wire    ap_block_pp0_stage1_01001;
reg    data_ce0_local;
reg    data_1_ce0_local;
reg    data_2_ce0_local;
reg    data_3_ce0_local;
reg   [31:0] grp_fu_158_p0;
wire   [31:0] zext_ln113_fu_180_p1;
wire   [7:0] lshr_ln3_fu_190_p4;
wire   [31:0] y_assign_fu_211_p9;
wire   [1:0] y_assign_fu_211_p10;
wire   [31:0] bitcast_ln247_fu_253_p1;
wire   [31:0] bitcast_ln247_1_fu_270_p1;
wire   [7:0] tmp_3_fu_256_p4;
wire   [22:0] trunc_ln247_fu_266_p1;
wire   [0:0] icmp_ln247_1_fu_293_p2;
wire   [0:0] icmp_ln247_fu_287_p2;
wire   [7:0] tmp_5_fu_273_p4;
wire   [22:0] trunc_ln247_1_fu_283_p1;
wire   [0:0] icmp_ln247_3_fu_311_p2;
wire   [0:0] icmp_ln247_2_fu_305_p2;
wire   [0:0] grp_fu_158_p2;
wire   [0:0] and_ln247_fu_323_p2;
wire   [0:0] or_ln247_fu_299_p2;
wire   [0:0] and_ln247_1_fu_329_p2;
wire   [31:0] bitcast_ln241_fu_341_p1;
wire   [7:0] tmp_7_fu_344_p4;
wire   [22:0] trunc_ln241_fu_354_p1;
wire   [0:0] icmp_ln241_1_fu_364_p2;
wire   [0:0] icmp_ln241_fu_358_p2;
wire   [0:0] and_ln241_fu_376_p2;
wire   [0:0] or_ln241_fu_370_p2;
wire   [0:0] and_ln241_1_fu_381_p2;
reg   [4:0] grp_fu_158_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] y_assign_fu_211_p1;
wire   [1:0] y_assign_fu_211_p3;
wire  signed [1:0] y_assign_fu_211_p5;
wire  signed [1:0] y_assign_fu_211_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 max_val_2_fu_68 = 32'd0;
#0 min_val_2_fu_72 = 32'd0;
#0 i_fu_76 = 31'd0;
#0 ap_done_reg = 1'b0;
end

calculate_statistics_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_158_p0),
    .din1(y_assign_reg_462),
    .ce(1'b1),
    .opcode(grp_fu_158_opcode),
    .dout(grp_fu_158_p2)
);

(* dissolve_hierarchy = "yes" *) calculate_statistics_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U30(
    .din0(data_q0),
    .din1(data_1_q0),
    .din2(data_2_q0),
    .din3(data_3_q0),
    .def(y_assign_fu_211_p9),
    .sel(y_assign_fu_211_p10),
    .dout(y_assign_fu_211_p11)
);

calculate_statistics_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_76 <= 31'd1;
    end else if (((icmp_ln113_reg_438 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_76 <= add_ln113_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        max_val_2_fu_68 <= min_val_3;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        max_val_2_fu_68 <= max_val_reg_494;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            min_val_2_fu_72 <= min_val_3;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_val_2_fu_72 <= min_val_reg_489;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        max_val_2_load_1_reg_477 <= ap_sig_allocacmp_max_val_2_load_1;
        min_val_reg_489 <= min_val_fu_335_p3;
        or_ln247_1_reg_484 <= or_ln247_1_fu_317_p2;
        y_assign_reg_462 <= y_assign_fu_211_p11;
        y_assign_reg_462_pp0_iter1_reg <= y_assign_reg_462;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_reg_432 <= ap_sig_allocacmp_i_3;
        icmp_ln113_reg_438 <= icmp_ln113_fu_184_p2;
        icmp_ln113_reg_438_pp0_iter1_reg <= icmp_ln113_reg_438;
        max_val_reg_494 <= max_val_fu_387_p3;
        min_val_2_load_1_reg_470 <= ap_sig_allocacmp_min_val_2_load_1;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_438 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 31'd1;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_max_val_2_load_1 = max_val_reg_494;
    end else begin
        ap_sig_allocacmp_max_val_2_load_1 = max_val_2_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_min_val_2_load_1 = min_val_reg_489;
    end else begin
        ap_sig_allocacmp_min_val_2_load_1 = min_val_2_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_1_ce0_local = 1'b1;
    end else begin
        data_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_2_ce0_local = 1'b1;
    end else begin
        data_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_3_ce0_local = 1'b1;
    end else begin
        data_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_ce0_local = 1'b1;
    end else begin
        data_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_00001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_158_opcode = 5'd2;
        end else if (((1'b0 == ap_block_pp0_stage0_00001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_158_opcode = 5'd4;
        end else begin
            grp_fu_158_opcode = 'bx;
        end
    end else begin
        grp_fu_158_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_158_p0 = ap_sig_allocacmp_max_val_2_load_1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_158_p0 = ap_sig_allocacmp_min_val_2_load_1;
        end else begin
            grp_fu_158_p0 = 'bx;
        end
    end else begin
        grp_fu_158_p0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_438_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        max_val_2_out_ap_vld = 1'b1;
    end else begin
        max_val_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_438_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        min_val_2_out_ap_vld = 1'b1;
    end else begin
        min_val_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln113_fu_235_p2 = (i_3_reg_432 + 31'd1);

assign and_ln241_1_fu_381_p2 = (or_ln241_fu_370_p2 & and_ln241_fu_376_p2);

assign and_ln241_fu_376_p2 = (or_ln247_1_reg_484 & grp_fu_158_p2);

assign and_ln247_1_fu_329_p2 = (or_ln247_fu_299_p2 & and_ln247_fu_323_p2);

assign and_ln247_fu_323_p2 = (or_ln247_1_fu_317_p2 & grp_fu_158_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign bitcast_ln241_fu_341_p1 = max_val_2_load_1_reg_477;

assign bitcast_ln247_1_fu_270_p1 = y_assign_reg_462;

assign bitcast_ln247_fu_253_p1 = min_val_2_load_1_reg_470;

assign data_1_address0 = zext_ln113_1_fu_200_p1;

assign data_1_ce0 = data_1_ce0_local;

assign data_2_address0 = zext_ln113_1_fu_200_p1;

assign data_2_ce0 = data_2_ce0_local;

assign data_3_address0 = zext_ln113_1_fu_200_p1;

assign data_3_ce0 = data_3_ce0_local;

assign data_address0 = zext_ln113_1_fu_200_p1;

assign data_ce0 = data_ce0_local;

assign icmp_ln113_fu_184_p2 = (($signed(zext_ln113_fu_180_p1) < $signed(n)) ? 1'b1 : 1'b0);

assign icmp_ln241_1_fu_364_p2 = ((trunc_ln241_fu_354_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_358_p2 = ((tmp_7_fu_344_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln247_1_fu_293_p2 = ((trunc_ln247_fu_266_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln247_2_fu_305_p2 = ((tmp_5_fu_273_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln247_3_fu_311_p2 = ((trunc_ln247_1_fu_283_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln247_fu_287_p2 = ((tmp_3_fu_256_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln3_fu_190_p4 = {{ap_sig_allocacmp_i_3[9:2]}};

assign max_val_2_out = max_val_2_fu_68;

assign max_val_fu_387_p3 = ((and_ln241_1_fu_381_p2[0:0] == 1'b1) ? max_val_2_load_1_reg_477 : y_assign_reg_462_pp0_iter1_reg);

assign min_val_2_out = min_val_2_fu_72;

assign min_val_fu_335_p3 = ((and_ln247_1_fu_329_p2[0:0] == 1'b1) ? min_val_2_load_1_reg_470 : y_assign_reg_462);

assign or_ln241_fu_370_p2 = (icmp_ln241_fu_358_p2 | icmp_ln241_1_fu_364_p2);

assign or_ln247_1_fu_317_p2 = (icmp_ln247_3_fu_311_p2 | icmp_ln247_2_fu_305_p2);

assign or_ln247_fu_299_p2 = (icmp_ln247_fu_287_p2 | icmp_ln247_1_fu_293_p2);

assign tmp_3_fu_256_p4 = {{bitcast_ln247_fu_253_p1[30:23]}};

assign tmp_5_fu_273_p4 = {{bitcast_ln247_1_fu_270_p1[30:23]}};

assign tmp_7_fu_344_p4 = {{bitcast_ln241_fu_341_p1[30:23]}};

assign trunc_ln241_fu_354_p1 = bitcast_ln241_fu_341_p1[22:0];

assign trunc_ln247_1_fu_283_p1 = bitcast_ln247_1_fu_270_p1[22:0];

assign trunc_ln247_fu_266_p1 = bitcast_ln247_fu_253_p1[22:0];

assign y_assign_fu_211_p10 = i_3_reg_432[1:0];

assign y_assign_fu_211_p9 = 'bx;

assign zext_ln113_1_fu_200_p1 = lshr_ln3_fu_190_p4;

assign zext_ln113_fu_180_p1 = ap_sig_allocacmp_i_3;

endmodule //calculate_statistics_calculate_statistics_Pipeline_find_minmax
