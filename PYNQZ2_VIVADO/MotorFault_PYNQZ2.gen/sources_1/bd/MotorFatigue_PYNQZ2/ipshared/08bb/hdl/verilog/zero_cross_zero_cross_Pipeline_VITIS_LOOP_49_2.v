// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module zero_cross_zero_cross_Pipeline_VITIS_LOOP_49_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        temp_blk_3,
        first_crossing_1,
        second_crossing_1,
        sub42,
        temp_blk_2_load,
        temp_blk_1_load,
        element_idx,
        result,
        zext_ln20,
        j_out,
        j_out_ap_vld,
        first_crossing_2_out,
        first_crossing_2_out_ap_vld,
        second_crossing_2_out,
        second_crossing_2_out_ap_vld,
        ap_return,
        grp_fu_322_p_din0,
        grp_fu_322_p_din1,
        grp_fu_322_p_dout0,
        grp_fu_322_p_ce,
        grp_fu_331_p_din0,
        grp_fu_331_p_din1,
        grp_fu_331_p_opcode,
        grp_fu_331_p_dout0,
        grp_fu_331_p_ce
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] temp_blk_3;
input  [31:0] first_crossing_1;
input  [31:0] second_crossing_1;
input  [1:0] sub42;
input  [31:0] temp_blk_2_load;
input  [31:0] temp_blk_1_load;
input  [30:0] element_idx;
input  [31:0] result;
input  [30:0] zext_ln20;
output  [0:0] j_out;
output   j_out_ap_vld;
output  [31:0] first_crossing_2_out;
output   first_crossing_2_out_ap_vld;
output  [31:0] second_crossing_2_out;
output   second_crossing_2_out_ap_vld;
output  [0:0] ap_return;
output  [31:0] grp_fu_322_p_din0;
output  [31:0] grp_fu_322_p_din1;
input  [31:0] grp_fu_322_p_dout0;
output   grp_fu_322_p_ce;
output  [31:0] grp_fu_331_p_din0;
output  [31:0] grp_fu_331_p_din1;
output  [4:0] grp_fu_331_p_opcode;
input  [0:0] grp_fu_331_p_dout0;
output   grp_fu_331_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg j_out_ap_vld;
reg first_crossing_2_out_ap_vld;
reg second_crossing_2_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] zext_ln20_cast_fu_190_p1;
reg   [31:0] zext_ln20_cast_reg_426;
reg   [1:0] j_1_reg_431;
wire    ap_CS_fsm_state2;
reg   [31:0] second_crossing_2_reg_436;
reg   [31:0] first_crossing_2_reg_443;
wire   [0:0] trunc_ln49_fu_223_p1;
reg   [0:0] trunc_ln49_reg_450;
wire   [0:0] icmp_ln49_fu_227_p2;
reg   [0:0] icmp_ln49_reg_457;
wire   [1:0] j_2_fu_232_p2;
reg   [1:0] j_2_reg_461;
wire   [31:0] select_ln50_fu_244_p3;
reg   [31:0] select_ln50_reg_466;
reg   [31:0] mul1_reg_477;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln50_1_fu_271_p2;
reg   [0:0] icmp_ln50_1_reg_483;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln50_2_fu_277_p2;
reg   [0:0] icmp_ln50_2_reg_488;
wire   [0:0] and_ln50_fu_290_p2;
reg   [0:0] and_ln50_reg_493;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln51_fu_296_p2;
reg   [0:0] icmp_ln51_reg_497;
wire   [31:0] add_ln54_fu_301_p2;
reg   [31:0] add_ln54_reg_501;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_173_p4;
reg   [0:0] UnifiedRetVal_reg_169;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state10;
reg   [31:0] empty_fu_78;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln57_fu_315_p2;
wire   [0:0] icmp_ln53_fu_306_p2;
reg   [1:0] j_fu_82;
reg   [31:0] second_crossing_fu_86;
wire   [31:0] zext_ln53_3_fu_337_p1;
wire   [0:0] icmp_ln54_fu_324_p2;
reg   [31:0] first_crossing_fu_90;
wire   [31:0] zext_ln53_1_fu_354_p1;
wire   [0:0] icmp_ln50_fu_238_p2;
wire   [31:0] bitcast_ln50_fu_254_p1;
wire   [7:0] tmp_5_fu_257_p4;
wire   [22:0] trunc_ln50_fu_267_p1;
wire   [0:0] or_ln50_fu_286_p2;
wire   [31:0] zext_ln49_fu_283_p1;
wire   [31:0] sub_ln57_fu_311_p2;
wire   [31:0] sub_ln54_fu_320_p2;
wire   [30:0] zext_ln53_2_fu_329_p1;
wire   [30:0] add_ln53_1_fu_332_p2;
wire   [30:0] zext_ln53_fu_346_p1;
wire   [30:0] add_ln53_fu_349_p2;
reg   [0:0] ap_return_preg;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 empty_fu_78 = 32'd0;
#0 j_fu_82 = 2'd0;
#0 second_crossing_fu_86 = 32'd0;
#0 first_crossing_fu_90 = 32'd0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_173_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_457 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        UnifiedRetVal_reg_169 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        UnifiedRetVal_reg_169 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_fu_78 <= temp_blk_3;
    end else if (((1'b1 == ap_CS_fsm_state9) & (((((icmp_ln49_reg_457 == 1'd1) & (icmp_ln53_fu_306_p2 == 1'd1)) | ((icmp_ln49_reg_457 == 1'd1) & (icmp_ln57_fu_315_p2 == 1'd1))) | ((icmp_ln49_reg_457 == 1'd1) & (icmp_ln51_reg_497 == 1'd1))) | ((icmp_ln49_reg_457 == 1'd1) & (1'd0 == and_ln50_reg_493))))) begin
        empty_fu_78 <= select_ln50_reg_466;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        first_crossing_fu_90 <= first_crossing_1;
    end else if (((icmp_ln49_reg_457 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln50_reg_493) & (icmp_ln51_reg_497 == 1'd1))) begin
        first_crossing_fu_90 <= zext_ln53_1_fu_354_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_82 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (((((icmp_ln49_reg_457 == 1'd1) & (icmp_ln53_fu_306_p2 == 1'd1)) | ((icmp_ln49_reg_457 == 1'd1) & (icmp_ln57_fu_315_p2 == 1'd1))) | ((icmp_ln49_reg_457 == 1'd1) & (icmp_ln51_reg_497 == 1'd1))) | ((icmp_ln49_reg_457 == 1'd1) & (1'd0 == and_ln50_reg_493))))) begin
        j_fu_82 <= j_2_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        second_crossing_fu_86 <= second_crossing_1;
    end else if (((icmp_ln49_reg_457 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln54_fu_324_p2 == 1'd0) & (icmp_ln53_fu_306_p2 == 1'd1) & (1'd1 == and_ln50_reg_493) & (icmp_ln51_reg_497 == 1'd0))) begin
        second_crossing_fu_86 <= zext_ln53_3_fu_337_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln54_reg_501 <= add_ln54_fu_301_p2;
        and_ln50_reg_493 <= and_ln50_fu_290_p2;
        icmp_ln51_reg_497 <= icmp_ln51_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        first_crossing_2_reg_443 <= first_crossing_fu_90;
        icmp_ln49_reg_457 <= icmp_ln49_fu_227_p2;
        j_1_reg_431 <= j_fu_82;
        j_2_reg_461 <= j_2_fu_232_p2;
        second_crossing_2_reg_436 <= second_crossing_fu_86;
        select_ln50_reg_466 <= select_ln50_fu_244_p3;
        trunc_ln49_reg_450 <= trunc_ln49_fu_223_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln50_1_reg_483 <= icmp_ln50_1_fu_271_p2;
        icmp_ln50_2_reg_488 <= icmp_ln50_2_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul1_reg_477 <= grp_fu_322_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        zext_ln20_cast_reg_426[30 : 0] <= zext_ln20_cast_fu_190_p1[30 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_457 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_173_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_173_p4 = UnifiedRetVal_reg_169;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_173_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((icmp_ln49_reg_457 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        first_crossing_2_out_ap_vld = 1'b1;
    end else begin
        first_crossing_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((icmp_ln49_reg_457 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        j_out_ap_vld = 1'b1;
    end else begin
        j_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((icmp_ln49_reg_457 == 1'd1) & (1'b1 == ap_CS_fsm_state10)))) begin
        second_crossing_2_out_ap_vld = 1'b1;
    end else begin
        second_crossing_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (((((icmp_ln49_reg_457 == 1'd1) & (icmp_ln53_fu_306_p2 == 1'd1)) | ((icmp_ln49_reg_457 == 1'd1) & (icmp_ln57_fu_315_p2 == 1'd1))) | ((icmp_ln49_reg_457 == 1'd1) & (icmp_ln51_reg_497 == 1'd1))) | ((icmp_ln49_reg_457 == 1'd1) & (1'd0 == and_ln50_reg_493))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln49_reg_457 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln53_1_fu_332_p2 = (zext_ln53_2_fu_329_p1 + element_idx);

assign add_ln53_fu_349_p2 = (zext_ln53_fu_346_p1 + element_idx);

assign add_ln54_fu_301_p2 = (zext_ln49_fu_283_p1 + zext_ln20_cast_reg_426);

assign and_ln50_fu_290_p2 = (or_ln50_fu_286_p2 & grp_fu_331_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln50_fu_254_p1 = mul1_reg_477;

assign first_crossing_2_out = first_crossing_2_reg_443;

assign grp_fu_322_p_ce = 1'b1;

assign grp_fu_322_p_din0 = empty_fu_78;

assign grp_fu_322_p_din1 = select_ln50_reg_466;

assign grp_fu_331_p_ce = 1'b1;

assign grp_fu_331_p_din0 = mul1_reg_477;

assign grp_fu_331_p_din1 = 32'd0;

assign grp_fu_331_p_opcode = 5'd5;

assign icmp_ln49_fu_227_p2 = ((j_fu_82 < sub42) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_271_p2 = ((tmp_5_fu_257_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_277_p2 = ((trunc_ln50_fu_267_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_238_p2 = ((j_fu_82 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_296_p2 = ((first_crossing_2_reg_443 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_306_p2 = ((second_crossing_2_reg_436 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_324_p2 = (($signed(sub_ln54_fu_320_p2) < $signed(result)) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_315_p2 = (($signed(sub_ln57_fu_311_p2) < $signed(result)) ? 1'b1 : 1'b0);

assign j_2_fu_232_p2 = (j_fu_82 + 2'd1);

assign j_out = trunc_ln49_reg_450;

assign or_ln50_fu_286_p2 = (icmp_ln50_2_reg_488 | icmp_ln50_1_reg_483);

assign second_crossing_2_out = second_crossing_2_reg_436;

assign select_ln50_fu_244_p3 = ((icmp_ln50_fu_238_p2[0:0] == 1'b1) ? temp_blk_2_load : temp_blk_1_load);

assign sub_ln54_fu_320_p2 = (add_ln54_reg_501 - first_crossing_2_reg_443);

assign sub_ln57_fu_311_p2 = (add_ln54_reg_501 - second_crossing_2_reg_436);

assign tmp_5_fu_257_p4 = {{bitcast_ln50_fu_254_p1[30:23]}};

assign trunc_ln49_fu_223_p1 = j_fu_82[0:0];

assign trunc_ln50_fu_267_p1 = bitcast_ln50_fu_254_p1[22:0];

assign zext_ln20_cast_fu_190_p1 = zext_ln20;

assign zext_ln49_fu_283_p1 = j_1_reg_431;

assign zext_ln53_1_fu_354_p1 = add_ln53_fu_349_p2;

assign zext_ln53_2_fu_329_p1 = trunc_ln49_reg_450;

assign zext_ln53_3_fu_337_p1 = add_ln53_1_fu_332_p2;

assign zext_ln53_fu_346_p1 = trunc_ln49_reg_450;

always @ (posedge ap_clk) begin
    zext_ln20_cast_reg_426[31] <= 1'b0;
end

endmodule //zero_cross_zero_cross_Pipeline_VITIS_LOOP_49_2
