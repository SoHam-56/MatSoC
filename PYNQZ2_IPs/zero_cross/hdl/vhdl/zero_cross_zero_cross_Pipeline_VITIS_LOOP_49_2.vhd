-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity zero_cross_zero_cross_Pipeline_VITIS_LOOP_49_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    temp_blk_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    first_crossing_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    second_crossing_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub42 : IN STD_LOGIC_VECTOR (1 downto 0);
    temp_blk_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_blk_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    element_idx : IN STD_LOGIC_VECTOR (30 downto 0);
    result : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln20 : IN STD_LOGIC_VECTOR (30 downto 0);
    j_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    j_out_ap_vld : OUT STD_LOGIC;
    first_crossing_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    first_crossing_2_out_ap_vld : OUT STD_LOGIC;
    second_crossing_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    second_crossing_2_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_322_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_322_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_322_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_322_p_ce : OUT STD_LOGIC;
    grp_fu_331_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_331_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_331_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_331_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_331_p_ce : OUT STD_LOGIC );
end;


architecture behav of zero_cross_zero_cross_Pipeline_VITIS_LOOP_49_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln20_cast_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_cast_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_431 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal second_crossing_2_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_crossing_2_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_fu_223_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln49_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_232_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_461 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln50_fu_244_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln50_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln50_1_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_1_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln50_2_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_2_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln51_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_173_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_169 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal empty_fu_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln57_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_82 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal second_crossing_fu_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal zext_ln53_3_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln54_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_crossing_fu_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal zext_ln53_1_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln50_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln50_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_257_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln50_fu_267_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln50_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln57_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln54_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_2_fu_329_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln53_1_fu_332_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln53_fu_346_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln53_fu_349_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component zero_cross_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component zero_cross_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_173_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                UnifiedRetVal_reg_169 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                UnifiedRetVal_reg_169 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    empty_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_fu_78 <= temp_blk_3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (((((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln53_fu_306_p2 = ap_const_lv1_1)) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln57_fu_315_p2 = ap_const_lv1_1))) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln51_reg_497 = ap_const_lv1_1))) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln50_reg_493))))) then 
                empty_fu_78 <= select_ln50_reg_466;
            end if; 
        end if;
    end process;

    first_crossing_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                first_crossing_fu_90 <= first_crossing_1;
            elsif (((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = and_ln50_reg_493) and (icmp_ln51_reg_497 = ap_const_lv1_1))) then 
                first_crossing_fu_90 <= zext_ln53_1_fu_354_p1;
            end if; 
        end if;
    end process;

    j_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_82 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (((((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln53_fu_306_p2 = ap_const_lv1_1)) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln57_fu_315_p2 = ap_const_lv1_1))) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln51_reg_497 = ap_const_lv1_1))) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln50_reg_493))))) then 
                j_fu_82 <= j_2_reg_461;
            end if; 
        end if;
    end process;

    second_crossing_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                second_crossing_fu_86 <= second_crossing_1;
            elsif (((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln54_fu_324_p2 = ap_const_lv1_0) and (icmp_ln53_fu_306_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln50_reg_493) and (icmp_ln51_reg_497 = ap_const_lv1_0))) then 
                second_crossing_fu_86 <= zext_ln53_3_fu_337_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln54_reg_501 <= add_ln54_fu_301_p2;
                and_ln50_reg_493 <= and_ln50_fu_290_p2;
                icmp_ln51_reg_497 <= icmp_ln51_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                first_crossing_2_reg_443 <= first_crossing_fu_90;
                icmp_ln49_reg_457 <= icmp_ln49_fu_227_p2;
                j_1_reg_431 <= j_fu_82;
                j_2_reg_461 <= j_2_fu_232_p2;
                second_crossing_2_reg_436 <= second_crossing_fu_86;
                select_ln50_reg_466 <= select_ln50_fu_244_p3;
                trunc_ln49_reg_450 <= trunc_ln49_fu_223_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln50_1_reg_483 <= icmp_ln50_1_fu_271_p2;
                icmp_ln50_2_reg_488 <= icmp_ln50_2_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul1_reg_477 <= grp_fu_322_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    zext_ln20_cast_reg_426(30 downto 0) <= zext_ln20_cast_fu_190_p1(30 downto 0);
            end if;
        end if;
    end process;
    zext_ln20_cast_reg_426(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln49_reg_457, and_ln50_reg_493, icmp_ln51_reg_497, ap_CS_fsm_state9, icmp_ln57_fu_315_p2, icmp_ln53_fu_306_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (((((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln53_fu_306_p2 = ap_const_lv1_1)) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln57_fu_315_p2 = ap_const_lv1_1))) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (icmp_ln51_reg_497 = ap_const_lv1_1))) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln50_reg_493))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln49_reg_457 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln53_1_fu_332_p2 <= std_logic_vector(unsigned(zext_ln53_2_fu_329_p1) + unsigned(element_idx));
    add_ln53_fu_349_p2 <= std_logic_vector(unsigned(zext_ln53_fu_346_p1) + unsigned(element_idx));
    add_ln54_fu_301_p2 <= std_logic_vector(unsigned(zext_ln49_fu_283_p1) + unsigned(zext_ln20_cast_reg_426));
    and_ln50_fu_290_p2 <= (or_ln50_fu_286_p2 and grp_fu_331_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_173_p4_assign_proc : process(icmp_ln49_reg_457, UnifiedRetVal_reg_169, ap_CS_fsm_state10)
    begin
        if (((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_173_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_173_p4 <= UnifiedRetVal_reg_169;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_173_p4, ap_CS_fsm_state10, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_173_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln50_fu_254_p1 <= mul1_reg_477;
    first_crossing_2_out <= first_crossing_2_reg_443;

    first_crossing_2_out_ap_vld_assign_proc : process(icmp_ln49_reg_457, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            first_crossing_2_out_ap_vld <= ap_const_logic_1;
        else 
            first_crossing_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_322_p_ce <= ap_const_logic_1;
    grp_fu_322_p_din0 <= empty_fu_78;
    grp_fu_322_p_din1 <= select_ln50_reg_466;
    grp_fu_331_p_ce <= ap_const_logic_1;
    grp_fu_331_p_din0 <= mul1_reg_477;
    grp_fu_331_p_din1 <= ap_const_lv32_0;
    grp_fu_331_p_opcode <= ap_const_lv5_5;
    icmp_ln49_fu_227_p2 <= "1" when (unsigned(j_fu_82) < unsigned(sub42)) else "0";
    icmp_ln50_1_fu_271_p2 <= "0" when (tmp_5_fu_257_p4 = ap_const_lv8_FF) else "1";
    icmp_ln50_2_fu_277_p2 <= "1" when (trunc_ln50_fu_267_p1 = ap_const_lv23_0) else "0";
    icmp_ln50_fu_238_p2 <= "1" when (j_fu_82 = ap_const_lv2_1) else "0";
    icmp_ln51_fu_296_p2 <= "1" when (first_crossing_2_reg_443 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln53_fu_306_p2 <= "1" when (second_crossing_2_reg_436 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln54_fu_324_p2 <= "1" when (signed(sub_ln54_fu_320_p2) < signed(result)) else "0";
    icmp_ln57_fu_315_p2 <= "1" when (signed(sub_ln57_fu_311_p2) < signed(result)) else "0";
    j_2_fu_232_p2 <= std_logic_vector(unsigned(j_fu_82) + unsigned(ap_const_lv2_1));
    j_out <= trunc_ln49_reg_450;

    j_out_ap_vld_assign_proc : process(icmp_ln49_reg_457, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            j_out_ap_vld <= ap_const_logic_1;
        else 
            j_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln50_fu_286_p2 <= (icmp_ln50_2_reg_488 or icmp_ln50_1_reg_483);
    second_crossing_2_out <= second_crossing_2_reg_436;

    second_crossing_2_out_ap_vld_assign_proc : process(icmp_ln49_reg_457, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln49_reg_457 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            second_crossing_2_out_ap_vld <= ap_const_logic_1;
        else 
            second_crossing_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln50_fu_244_p3 <= 
        temp_blk_2_load when (icmp_ln50_fu_238_p2(0) = '1') else 
        temp_blk_1_load;
    sub_ln54_fu_320_p2 <= std_logic_vector(unsigned(add_ln54_reg_501) - unsigned(first_crossing_2_reg_443));
    sub_ln57_fu_311_p2 <= std_logic_vector(unsigned(add_ln54_reg_501) - unsigned(second_crossing_2_reg_436));
    tmp_5_fu_257_p4 <= bitcast_ln50_fu_254_p1(30 downto 23);
    trunc_ln49_fu_223_p1 <= j_fu_82(1 - 1 downto 0);
    trunc_ln50_fu_267_p1 <= bitcast_ln50_fu_254_p1(23 - 1 downto 0);
    zext_ln20_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln20),32));
    zext_ln49_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_431),32));
    zext_ln53_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_fu_349_p2),32));
    zext_ln53_2_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln49_reg_450),31));
    zext_ln53_3_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_1_fu_332_p2),32));
    zext_ln53_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln49_reg_450),31));
end behav;
