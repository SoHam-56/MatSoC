// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pack_stream_to_blk_pack_stream_to_blk,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.118000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=567,HLS_SYN_LUT=889,HLS_VERSION=2024_2}" *)

module pack_stream_to_blk (
        ap_clk,
        ap_rst_n,
        input_stream_TDATA,
        input_stream_TVALID,
        input_stream_TREADY,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TLAST,
        blk_stream_TDATA,
        blk_stream_TVALID,
        blk_stream_TREADY,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_stream_TDATA;
input   input_stream_TVALID;
output   input_stream_TREADY;
input  [3:0] input_stream_TKEEP;
input  [3:0] input_stream_TSTRB;
input  [0:0] input_stream_TLAST;
output  [95:0] blk_stream_TDATA;
output   blk_stream_TVALID;
input   blk_stream_TREADY;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] n;
reg    input_stream_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    blk_stream_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [0:0] or_ln23_reg_393;
reg   [31:0] n_read_reg_323;
wire   [31:0] sub4_fu_126_p2;
reg   [31:0] sub4_reg_328;
wire   [30:0] i_2_fu_154_p2;
reg   [30:0] i_2_reg_336;
wire    ap_CS_fsm_state2;
reg   [31:0] p_load10_reg_341;
reg   [31:0] p_load_reg_346;
wire   [0:0] icmp_ln19_fu_163_p2;
reg   [0:0] icmp_ln19_reg_351;
wire   [0:0] icmp_ln19_1_fu_169_p2;
reg   [0:0] icmp_ln19_1_reg_357;
wire   [31:0] blk_idx_2_fu_175_p2;
reg   [31:0] blk_idx_2_reg_363;
wire   [0:0] icmp_ln23_1_fu_181_p2;
reg   [0:0] icmp_ln23_1_reg_371;
wire   [31:0] data_conv_1_fu_197_p3;
reg   [31:0] data_conv_1_reg_377;
wire   [31:0] data_conv_2_fu_205_p3;
reg   [31:0] data_conv_2_reg_382;
wire   [31:0] data_conv_3_fu_212_p3;
reg   [31:0] data_conv_3_reg_387;
wire   [0:0] or_ln23_fu_224_p2;
wire    grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start;
wire    grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_done;
wire    grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_idle;
wire    grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_ready;
wire   [31:0] grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out_o;
wire    grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out_o_ap_vld;
wire   [31:0] grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out1_o;
wire    grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out1_o_ap_vld;
reg    grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start_reg;
wire   [0:0] and_ln25_fu_248_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] empty_16_fu_82;
reg   [31:0] empty_15_fu_78;
reg   [31:0] blk_idx_fu_66;
reg    ap_block_state6;
wire   [0:0] icmp_ln13_fu_149_p2;
reg   [30:0] i_fu_70;
reg   [31:0] empty_fu_74;
wire   [31:0] zext_ln13_fu_145_p1;
wire   [0:0] or_ln19_fu_193_p2;
wire   [0:0] icmp_ln23_fu_219_p2;
wire   [0:0] icmp_ln25_fu_243_p2;
wire    regslice_both_blk_stream_U_apdone_blk;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    regslice_both_input_stream_V_data_V_U_apdone_blk;
wire   [31:0] input_stream_TDATA_int_regslice;
wire    input_stream_TVALID_int_regslice;
reg    input_stream_TREADY_int_regslice;
wire    regslice_both_input_stream_V_data_V_U_ack_in;
wire    regslice_both_input_stream_V_keep_V_U_apdone_blk;
wire   [3:0] input_stream_TKEEP_int_regslice;
wire    regslice_both_input_stream_V_keep_V_U_vld_out;
wire    regslice_both_input_stream_V_keep_V_U_ack_in;
wire    regslice_both_input_stream_V_strb_V_U_apdone_blk;
wire   [3:0] input_stream_TSTRB_int_regslice;
wire    regslice_both_input_stream_V_strb_V_U_vld_out;
wire    regslice_both_input_stream_V_strb_V_U_ack_in;
wire    regslice_both_input_stream_V_last_V_U_apdone_blk;
wire   [0:0] input_stream_TLAST_int_regslice;
wire    regslice_both_input_stream_V_last_V_U_vld_out;
wire    regslice_both_input_stream_V_last_V_U_ack_in;
wire   [95:0] blk_stream_TDATA_int_regslice;
reg    blk_stream_TVALID_int_regslice;
wire    blk_stream_TREADY_int_regslice;
wire    regslice_both_blk_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start_reg = 1'b0;
#0 empty_16_fu_82 = 32'd0;
#0 empty_15_fu_78 = 32'd0;
#0 blk_idx_fu_66 = 32'd0;
#0 i_fu_70 = 31'd0;
#0 empty_fu_74 = 32'd0;
end

pack_stream_to_blk_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2 grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start),
    .ap_done(grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_done),
    .ap_idle(grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_idle),
    .ap_ready(grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_ready),
    .data_conv_1(data_conv_1_reg_377),
    .data_conv_2(data_conv_2_reg_382),
    .zext_ln26(blk_idx_2_reg_363),
    .p_out_i(empty_16_fu_82),
    .p_out_o(grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out_o),
    .p_out_o_ap_vld(grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out_o_ap_vld),
    .p_out1_i(empty_15_fu_78),
    .p_out1_o(grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out1_o),
    .p_out1_o_ap_vld(grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out1_o_ap_vld)
);

pack_stream_to_blk_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .n(n),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_stream_TDATA),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_data_V_U_ack_in),
    .data_out(input_stream_TDATA_int_regslice),
    .vld_out(input_stream_TVALID_int_regslice),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_data_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_stream_TKEEP),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_keep_V_U_ack_in),
    .data_out(input_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_input_stream_V_keep_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_keep_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_stream_TSTRB),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_strb_V_U_ack_in),
    .data_out(input_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_input_stream_V_strb_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_strb_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_stream_TLAST),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_last_V_U_ack_in),
    .data_out(input_stream_TLAST_int_regslice),
    .vld_out(regslice_both_input_stream_V_last_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_last_V_U_apdone_blk)
);

pack_stream_to_blk_regslice_both #(
    .DataWidth( 96 ))
regslice_both_blk_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(blk_stream_TDATA_int_regslice),
    .vld_in(blk_stream_TVALID_int_regslice),
    .ack_in(blk_stream_TREADY_int_regslice),
    .data_out(blk_stream_TDATA),
    .vld_out(regslice_both_blk_stream_U_vld_out),
    .ack_out(blk_stream_TREADY),
    .apdone_blk(regslice_both_blk_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start_reg <= 1'b0;
    end else begin
        if (((or_ln23_fu_224_p2 == 1'd1) & (1'd1 == and_ln25_fu_248_p2) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start_reg <= 1'b1;
        end else if ((grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_ready == 1'b1)) begin
            grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln23_fu_224_p2 == 1'd0) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        blk_idx_fu_66 <= blk_idx_2_reg_363;
    end else if ((((or_ln23_reg_393 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        blk_idx_fu_66 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((or_ln23_fu_224_p2 == 1'd0) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((or_ln23_fu_224_p2 == 1'd1) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'd0 == and_ln25_fu_248_p2)))) begin
        empty_15_fu_78 <= data_conv_2_fu_205_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out1_o_ap_vld == 1'b1))) begin
        empty_15_fu_78 <= grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out1_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((or_ln23_fu_224_p2 == 1'd0) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((or_ln23_fu_224_p2 == 1'd1) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'd0 == and_ln25_fu_248_p2)))) begin
        empty_16_fu_82 <= data_conv_1_fu_197_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out_o_ap_vld == 1'b1))) begin
        empty_16_fu_82 <= grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_p_out_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_70 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
        i_fu_70 <= i_2_reg_336;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        blk_idx_2_reg_363 <= blk_idx_2_fu_175_p2;
        i_2_reg_336 <= i_2_fu_154_p2;
        icmp_ln19_1_reg_357 <= icmp_ln19_1_fu_169_p2;
        icmp_ln19_reg_351 <= icmp_ln19_fu_163_p2;
        icmp_ln23_1_reg_371 <= icmp_ln23_1_fu_181_p2;
        p_load10_reg_341 <= empty_15_fu_78;
        p_load_reg_346 <= empty_16_fu_82;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_conv_1_reg_377 <= data_conv_1_fu_197_p3;
        data_conv_2_reg_382 <= data_conv_2_fu_205_p3;
        data_conv_3_reg_387 <= data_conv_3_fu_212_p3;
        or_ln23_reg_393 <= or_ln23_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
        empty_fu_74 <= data_conv_3_reg_387;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        n_read_reg_323 <= n;
        sub4_reg_328 <= sub4_fu_126_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_blk_stream_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((input_stream_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_stream_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state6)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_blk_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_149_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_blk_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_149_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((or_ln23_reg_393 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        blk_stream_TDATA_blk_n = blk_stream_TREADY_int_regslice;
    end else begin
        blk_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((blk_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        blk_stream_TVALID_int_regslice = 1'b1;
    end else begin
        blk_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_stream_TDATA_blk_n = input_stream_TVALID_int_regslice;
    end else begin
        input_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        input_stream_TREADY_int_regslice = 1'b1;
    end else begin
        input_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((regslice_both_blk_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_149_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((regslice_both_blk_stream_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_149_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((or_ln23_fu_224_p2 == 1'd1) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (1'd0 == and_ln25_fu_248_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((or_ln23_fu_224_p2 == 1'd1) & (1'd1 == and_ln25_fu_248_p2) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((or_ln23_fu_224_p2 == 1'd0) & (input_stream_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((blk_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln25_fu_248_p2 = (icmp_ln25_fu_243_p2 & icmp_ln23_1_reg_371);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state6 = ((or_ln23_reg_393 == 1'd1) & (blk_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign blk_idx_2_fu_175_p2 = (blk_idx_fu_66 + 32'd1);

assign blk_stream_TDATA_int_regslice = {{{empty_16_fu_82}, {empty_15_fu_78}}, {data_conv_3_reg_387}};

assign blk_stream_TVALID = regslice_both_blk_stream_U_vld_out;

assign data_conv_1_fu_197_p3 = ((or_ln19_fu_193_p2[0:0] == 1'b1) ? p_load_reg_346 : input_stream_TDATA_int_regslice);

assign data_conv_2_fu_205_p3 = ((icmp_ln19_1_reg_357[0:0] == 1'b1) ? input_stream_TDATA_int_regslice : p_load10_reg_341);

assign data_conv_3_fu_212_p3 = ((icmp_ln19_reg_351[0:0] == 1'b1) ? input_stream_TDATA_int_regslice : empty_fu_74);

assign grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start = grp_pack_stream_to_blk_Pipeline_VITIS_LOOP_26_2_fu_111_ap_start_reg;

assign i_2_fu_154_p2 = (i_fu_70 + 31'd1);

assign icmp_ln13_fu_149_p2 = (($signed(zext_ln13_fu_145_p1) < $signed(n_read_reg_323)) ? 1'b1 : 1'b0);

assign icmp_ln19_1_fu_169_p2 = ((blk_idx_fu_66 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_163_p2 = ((blk_idx_fu_66 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_181_p2 = ((zext_ln13_fu_145_p1 == sub4_reg_328) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_219_p2 = ((blk_idx_2_reg_363 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_243_p2 = (($signed(blk_idx_2_reg_363) < $signed(32'd3)) ? 1'b1 : 1'b0);

assign input_stream_TREADY = regslice_both_input_stream_V_data_V_U_ack_in;

assign or_ln19_fu_193_p2 = (icmp_ln19_reg_351 | icmp_ln19_1_reg_357);

assign or_ln23_fu_224_p2 = (icmp_ln23_fu_219_p2 | icmp_ln23_1_reg_371);

assign sub4_fu_126_p2 = ($signed(n) + $signed(32'd4294967295));

assign zext_ln13_fu_145_p1 = i_fu_70;


reg find_kernel_block = 0;
// synthesis translate_off
`include "pack_stream_to_blk_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //pack_stream_to_blk

